"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageVersionUpdateCommand = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_version_update');
class PackageVersionUpdateCommand extends command_1.SfdxCommand {
    // eslint-disable-next-line @typescript-eslint/require-await
    async run() {
        throw new Error('Beta command not yet implemented');
    }
}
exports.PackageVersionUpdateCommand = PackageVersionUpdateCommand;
PackageVersionUpdateCommand.description = messages.getMessage('cliDescription');
PackageVersionUpdateCommand.examples = messages.getMessage('examples').split(os.EOL);
PackageVersionUpdateCommand.requiresDevhubUsername = true;
PackageVersionUpdateCommand.requiresProject = true;
PackageVersionUpdateCommand.flagsConfig = {
    package: command_1.flags.string({
        char: 'p',
        description: messages.getMessage('package'),
        longDescription: messages.getMessage('packageLong'),
        required: true,
    }),
    versionname: command_1.flags.string({
        char: 'a',
        description: messages.getMessage('name'),
        longDescription: messages.getMessage('nameLong'),
    }),
    versiondescription: command_1.flags.string({
        char: 'e',
        description: messages.getMessage('description'),
        longDescription: messages.getMessage('descriptionLong'),
    }),
    branch: command_1.flags.string({
        char: 'b',
        description: messages.getMessage('branch'),
        longDescription: messages.getMessage('branchLong'),
    }),
    tag: command_1.flags.string({
        char: 't',
        description: messages.getMessage('tag'),
        longDescription: messages.getMessage('tagLong'),
    }),
    installationkey: command_1.flags.string({
        char: 'k',
        description: messages.getMessage('key'),
        longDescription: messages.getMessage('longKey'),
    }),
};
//# sourceMappingURL=update.js.map