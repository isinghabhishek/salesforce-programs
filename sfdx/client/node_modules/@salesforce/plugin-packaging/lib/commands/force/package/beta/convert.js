"use strict";
/*
 * Copyright (c) 2018, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PackageConvert = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const kit_1 = require("@salesforce/kit");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_convert');
class PackageConvert extends command_1.SfdxCommand {
    // eslint-disable-next-line @typescript-eslint/require-await
    async run() {
        throw new Error('Beta command not yet implemented');
    }
}
exports.PackageConvert = PackageConvert;
PackageConvert.description = messages.getMessage('cliDescription');
PackageConvert.examples = messages.getMessage('examples').split(os.EOL);
PackageConvert.requiresDevhubUsername = true;
PackageConvert.hidden = true;
PackageConvert.flagsConfig = {
    package: command_1.flags.id({
        char: 'p',
        description: messages.getMessage('package'),
        longDescription: messages.getMessage('longPackage'),
        required: true,
        validate: /^033/,
    }),
    installationkey: command_1.flags.string({
        char: 'k',
        description: messages.getMessage('key'),
        longDescription: messages.getMessage('longKey'),
        exactlyOne: ['installationkey', 'installationkeybypass'],
    }),
    installationkeybypass: command_1.flags.boolean({
        char: 'x',
        description: messages.getMessage('keyBypass'),
        longDescription: messages.getMessage('longKeyBypass'),
        exactlyOne: ['installationkey', 'installationkeybypass'],
    }),
    wait: command_1.flags.minutes({
        char: 'w',
        description: messages.getMessage('wait'),
        longDescription: messages.getMessage('longWait'),
        default: kit_1.Duration.minutes(0),
    }),
    buildinstance: command_1.flags.string({
        char: 's',
        description: messages.getMessage('instance'),
        longDescription: messages.getMessage('longInstance'),
        hidden: true,
    }),
};
//# sourceMappingURL=convert.js.map