"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Report = void 0;
const os = require("os");
const command_1 = require("@salesforce/command");
const core_1 = require("@salesforce/core");
const packaging_1 = require("@salesforce/packaging");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_install_report');
const installMsgs = core_1.Messages.loadMessages('@salesforce/plugin-packaging', 'package_install');
class Report extends command_1.SfdxCommand {
    async run() {
        const connection = this.org.getConnection();
        const pkg = new packaging_1.Package({ connection });
        const installRequestId = this.flags.requestid;
        packaging_1.Package.validateId(installRequestId, 'PackageInstallRequestId');
        const pkgInstallRequest = await pkg.getInstallStatus(installRequestId);
        this.parseStatus(pkgInstallRequest);
        return pkgInstallRequest;
    }
    // @fixme: refactor with install code and any others
    parseStatus(request) {
        const { Status } = request;
        if (Status === 'SUCCESS') {
            this.ux.log(installMsgs.getMessage('packageInstallSuccess', [request.SubscriberPackageVersionKey]));
        }
        else if (['IN_PROGRESS', 'UNKNOWN'].includes(Status)) {
            this.ux.log(installMsgs.getMessage('packageInstallInProgress', [request.Id, this.org.getUsername()]));
        }
        else {
            throw installMsgs.createError('packageInstallError', [this.parseInstallErrors(request)]);
        }
    }
    // @fixme: refactor with install code and any others
    parseInstallErrors(request) {
        var _a;
        const errors = (_a = request === null || request === void 0 ? void 0 : request.Errors) === null || _a === void 0 ? void 0 : _a.errors;
        if (errors === null || errors === void 0 ? void 0 : errors.length) {
            let errorMessage = 'Installation errors: ';
            for (let i = 0; i < errors.length; i++) {
                errorMessage += `\n${i + 1}) ${errors[i].message}`;
            }
            return errorMessage;
        }
        return '<empty>';
    }
}
exports.Report = Report;
Report.description = messages.getMessage('cliDescription');
Report.examples = messages.getMessage('examples').split(os.EOL);
Report.requiresUsername = true;
Report.flagsConfig = {
    requestid: command_1.flags.id({
        char: 'i',
        description: messages.getMessage('requestId'),
        longDescription: messages.getMessage('requestIdLong'),
        required: true,
    }),
};
//# sourceMappingURL=report.js.map