import { Duration } from '@salesforce/kit';
import { Connection, NamedPackageDir, SfProject } from '@salesforce/core';
import { QueryResult, SaveResult } from 'jsforce';
import { PackageProfileApi } from '../package/packageProfileApi';
import { PackagingSObjects } from './packagingSObjects';
import Package2VersionStatus = PackagingSObjects.Package2VersionStatus;
import PackageInstallRequest = PackagingSObjects.PackageInstallRequest;
import MetadataPackageVersion = PackagingSObjects.MetadataPackageVersion;
export interface IPackage {
    create(): Promise<void>;
    convert(): Promise<void>;
    delete(): Promise<void>;
    install(pkgInstallCreateRequest: PackageInstallCreateRequest, options?: PackageInstallOptions): Promise<PackageInstallRequest>;
    getInstallStatus(installRequestId: string): Promise<PackageInstallRequest>;
    list(): Promise<QueryResult<PackagingSObjects.Package2>>;
    uninstall(): Promise<void>;
    update(): Promise<void>;
    waitForPublish(subscriberPackageVersionKey: string, timeout: number | Duration, installationKey?: string): any;
    getExternalSites(subscriberPackageVersionKey: string, installationKey?: string): any;
}
export interface IPackageVersion1GP {
    create(): Promise<void>;
    convert(): Promise<void>;
    delete(): Promise<void>;
    install(): Promise<void>;
    list(): Promise<void>;
    uninstall(): Promise<void>;
    update(): Promise<void>;
}
export interface IPackageVersion2GP {
    create(): Promise<void>;
    convert(): Promise<void>;
    delete(): Promise<void>;
    install(): Promise<void>;
    list(): Promise<void>;
    uninstall(): Promise<void>;
    update(): Promise<void>;
}
export declare type PackageOptions = {
    connection: Connection;
};
export declare type PackageIdType = 'PackageId' | 'SubscriberPackageVersionId' | 'PackageInstallRequestId' | 'PackageUninstallRequestId';
export declare type PackageVersionOptions1GP = Record<string, unknown>;
export declare type PackageVersionCreateRequestResult = {
    Id: string;
    Status: Package2VersionStatus;
    Package2Id: string;
    Package2VersionId: string;
    SubscriberPackageVersionId: string | null;
    Tag: string;
    Branch: string;
    Error: any[];
    CreatedDate: string;
    HasMetadataRemoved: boolean | null;
    CreatedBy: string;
};
export declare const PackageVersionCreateRequestResultInProgressStatuses: PackagingSObjects.Package2VersionStatus[];
export declare type PackageVersionCreateRequestError = {
    Message: string;
};
export declare type PackageVersionCreateEventData = {
    id: string;
    packageUpdated?: boolean;
    packageVersionCreateRequestResult: PackageVersionCreateRequestResult;
    message?: string;
    timeRemaining?: Duration;
};
export declare type PackageVersionListResult = {
    Id: string;
    Package2Id: string;
    SubscriberPackageVersionId: string;
    Name: string;
    Package2: {
        [key: string]: unknown;
        Name: string;
        NamespacePrefix: string;
        IsOrgDependent?: boolean;
    };
    Description: string;
    Tag: string;
    Branch: string;
    MajorVersion: string;
    MinorVersion: string;
    PatchVersion: string;
    BuildNumber: string;
    IsReleased: boolean;
    CreatedDate: string;
    LastModifiedDate: string;
    IsPasswordProtected: boolean;
    AncestorId: string;
    ValidationSkipped: boolean;
    CreatedById: string;
    CodeCoverage?: {
        [key: string]: unknown;
        ApexCodeCoveragePercentage: number;
    };
    HasPassedCodeCoverageCheck?: boolean;
    ConvertedFromVersionId?: string;
    ReleaseVersion?: string;
    BuildDurationInSeconds?: number;
    HasMetadataRemoved?: boolean;
};
export declare type PackageInstallCreateRequest = Partial<Pick<PackageInstallRequest, 'ApexCompileType' | 'EnableRss' | 'NameConflictResolution' | 'PackageInstallSource' | 'Password' | 'SecurityType' | 'UpgradeType'>> & Pick<PackagingSObjects.PackageInstallRequest, 'SubscriberPackageVersionKey'>;
export declare type Package1Display = {
    MetadataPackageVersionId: string;
    MetadataPackageId: string;
    Name: string;
    Version: string;
    ReleaseState: string;
    BuildNumber: number;
};
export declare type PackageType = 'Managed' | 'Unlocked';
export declare type PackageCreateOptions = {
    name: string;
    description: string;
    noNamespace: boolean;
    orgDependent: boolean;
    packageType: PackageType;
    errorNotificationUsername: string;
    path: string;
};
export declare type PackageDescriptorJson = Partial<NamedPackageDir> & Partial<{
    id: string;
    features: string[];
    orgPreferences: string[];
    snapshot: string;
    unpackagedMetadata: NamedPackageDir;
    apexTestAccess: {
        permissionSets: string[] | string;
        permissionSetLicenses: string[] | string;
    };
    permissionSetNames: string[];
    permissionSetLicenseDeveloperNames: string[];
    branch: string;
    subscriberPackageVersionId: string;
    packageId: string;
    versionName: string;
}>;
export declare type PackageVersionCreateRequest = {
    Package2Id: string;
    VersionInfo: string;
    Tag: string;
    Branch: string;
    InstallKey: string;
    Instance: string;
    SourceOrg: string;
    CalculateCodeCoverage: boolean;
    SkipValidation: boolean;
};
export declare type PackageVersionListOptions = {
    orderBy: string;
    modifiedLastDays: number;
    createdLastDays: number;
    packages: string[];
    verbose: boolean;
    concise: boolean;
    isReleased: boolean;
};
export declare type ListPackageVersionOptions = PackageVersionListOptions & {
    connection: Connection;
};
export declare type PackageSaveResult = SaveResult;
export declare type PackageVersionCreateRequestOptions = {
    path: string;
    preserve: boolean;
    definitionfile?: string;
    codecoverage?: boolean;
    branch?: string;
    skipancestorcheck?: boolean;
};
export declare type PackageInstallOptions = {
    /**
     * The frequency to poll the org for package installation status. If providing a number
     * it is interpreted in milliseconds.
     */
    pollingFrequency?: number | Duration;
    /**
     * The amount of time to wait for package installation to complete. If providing a number
     * it is interpreted in minutes.
     */
    pollingTimeout?: number | Duration;
};
export declare type MDFolderForArtifactOptions = {
    packageName?: string;
    sourceDir?: string;
    outputDir?: string;
    manifest?: string;
    sourcePaths?: string[];
    metadataPaths?: string[];
    deploydir?: string;
};
export declare type PackageVersionOptions = {
    connection: Connection;
    project: SfProject;
};
export declare type PackageVersionCreateOptions = Partial<PackageVersionOptions & {
    branch: string;
    buildinstance: string;
    codecoverage: boolean;
    definitionfile: string;
    installationkey: string;
    installationkeybypass: boolean;
    packageId: string;
    postinstallscript: string;
    postinstallurl: string;
    preserve: boolean;
    releasenotesurl: string;
    skipancestorcheck: boolean;
    skipvalidation: boolean;
    sourceorg: string;
    tag: string;
    uninstallscript: string;
    validateschema: boolean;
    versiondescription: string;
    versionname: string;
    versionnumber: string;
    profileApi: PackageProfileApi;
}>;
export declare type PackageVersionCreateRequestQueryOptions = {
    createdlastdays?: number;
    connection?: Connection;
    status?: string;
};
export declare type ProfileApiOptions = {
    project: SfProject;
    includeUserLicenses: boolean;
    generateProfileInformation: boolean;
};
export declare type PackageVersionReportResult = Partial<PackagingSObjects.Package2Version> & {
    Package2: Partial<PackagingSObjects.Package2>;
    SubscriberPackageVersion?: Pick<PackagingSObjects.SubscriberPackageVersion, 'Dependencies'>;
    Version: string;
    AncestorVersion?: string;
    PackageType: PackageType;
};
export declare type PackageVersionCreateReportProgress = PackageVersionCreateRequestResult & {
    remainingWaitTime: Duration;
};
export declare type Package1VersionCreateRequest = Pick<PackagingSObjects.PackageUploadRequest, 'VersionName'> & Partial<Pick<PackagingSObjects.PackageUploadRequest, 'MetadataPackageId' | 'Description' | 'MajorVersion' | 'MinorVersion' | 'IsReleaseVersion' | 'ReleaseNotesUrl' | 'PostInstallUrl' | 'Password'>>;
export declare type InstalledPackages = {
    Id: string;
    SubscriberPackageId: string;
    SubscriberPackageVersionId: string;
    MinPackageVersionId: string;
    SubscriberPackage?: PackagingSObjects.SubscriberPackage;
    SubscriberPackageVersion?: Omit<MetadataPackageVersion, 'MetadataPackageId' | 'ReleaseState' | 'IsDeprecated'>;
};
export declare type CodeCoverage = null | {
    apexCodeCoveragePercentage: number;
};
export declare type CodeCoveragePercentages = null | {
    codeCovPercentages: [
        {
            className: string;
            codeCoveragePercentage: number;
        }
    ];
};
