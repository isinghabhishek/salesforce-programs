"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.package1VersionList = void 0;
/**
 * Lists package versions available in dev org. If package ID is supplied, only list versions of that package,
 * otherwise, list all package versions
 *
 * @param connection: sfdx-core Connection to the org
 * @param metadataPackageId: optional, if present ID of package to list versions for (starts with 033)
 * @returns Array of package version results
 */
async function package1VersionList(connection, metadataPackageId) {
    const query = `SELECT Id,MetadataPackageId,Name,ReleaseState,MajorVersion,MinorVersion,PatchVersion,BuildNumber FROM MetadataPackageVersion ${metadataPackageId ? `WHERE MetadataPackageId = '${metadataPackageId}'` : ''} ORDER BY MetadataPackageId, MajorVersion, MinorVersion, PatchVersion, BuildNumber`;
    const queryResult = await connection.tooling.query(query);
    return queryResult.records?.map((record) => ({
        MetadataPackageVersionId: record.Id,
        MetadataPackageId: record.MetadataPackageId,
        Name: record.Name,
        ReleaseState: record.ReleaseState,
        Version: `${record.MajorVersion}.${record.MinorVersion}.${record.PatchVersion}`,
        BuildNumber: record.BuildNumber,
    }));
}
exports.package1VersionList = package1VersionList;
//# sourceMappingURL=package1VersionList.js.map