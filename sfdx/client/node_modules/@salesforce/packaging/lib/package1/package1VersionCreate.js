"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.package1VersionCreate = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/packaging', 'messages');
const packageUploadRequestStatus = async (id, connection, timeout, frequency) => {
    const pollingResult = await connection.tooling.sobject('PackageUploadRequest').retrieve(id);
    switch (pollingResult.Status) {
        case 'SUCCESS':
            return { completed: true, payload: pollingResult };
        case 'IN_PROGRESS':
        case 'QUEUED':
            timeout -= frequency;
            await core_1.Lifecycle.getInstance().emit('package1VersionCreate:progress', { timeout, pollingResult });
            return { completed: false, payload: pollingResult };
        default: {
            if (pollingResult?.Errors?.errors?.length > 0) {
                throw messages.createError('package1VersionCreateCommandUploadFailure', [
                    pollingResult.Errors.errors.map((e) => e.message).join(os.EOL),
                ]);
            }
            else {
                throw messages.createError('package1VersionCreateCommandUploadFailureDefault');
            }
        }
    }
};
async function package1VersionCreate(connection, options, pollingOptions = { frequency: kit_1.Duration.seconds(5), timeout: kit_1.Duration.seconds(0) }) {
    const createRequest = await connection.tooling.sobject('PackageUploadRequest').create(options);
    if (pollingOptions.timeout.seconds) {
        const timeout = pollingOptions.timeout.seconds;
        const pollingClient = await core_1.PollingClient.create({
            poll: () => packageUploadRequestStatus(createRequest.id, connection, timeout, pollingOptions.frequency.seconds),
            ...pollingOptions,
        });
        return pollingClient.subscribe();
    }
    else {
        // jsforce templates weren't working when setting the type to PackageUploadRequest, so we have to cast `as unknown as PackagingSObjects.PackageUploadRequest`
        return (await connection.tooling
            .sobject('PackageUploadRequest')
            .retrieve(createRequest.id));
    }
}
exports.package1VersionCreate = package1VersionCreate;
//# sourceMappingURL=package1VersionCreate.js.map