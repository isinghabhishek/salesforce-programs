"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.copyDir = exports.getElapsedTime = exports.zipDir = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const fs = require("fs");
const path_1 = require("path");
const stream_1 = require("stream");
const util_1 = require("util");
const core_1 = require("@salesforce/core");
const globby = require("globby");
const JSZIP = require("jszip");
const pipeline = (0, util_1.promisify)(stream_1.pipeline);
/**
 * Zips directory to given zipfile.
 *
 * https://github.com/archiverjs/node-archiver
 *
 * @param dir to zip
 * @param zipfile
 */
async function zipDir(dir, zipfile) {
    const logger = core_1.Logger.childFromRoot('srcDevUtils#zipDir');
    const timer = process.hrtime();
    const globbyResult = await globby('**/*', { expandDirectories: true, cwd: dir });
    const zip = new JSZIP();
    // add files tp zip
    for (const file of globbyResult) {
        zip.file(file, fs.readFileSync((0, path_1.join)(dir, file)));
    }
    // write zip to file
    const zipStream = zip.generateNodeStream({
        type: 'nodebuffer',
        streamFiles: true,
        compression: 'DEFLATE',
        compressionOptions: {
            level: 3,
        },
    });
    await pipeline(zipStream, fs.createWriteStream(zipfile));
    const stat = fs.statSync(zipfile);
    logger.debug(`${stat.size} bytes written to ${zipfile} in ${getElapsedTime(timer)}ms`);
    return;
}
exports.zipDir = zipDir;
function getElapsedTime(timer) {
    const elapsed = process.hrtime(timer);
    return (elapsed[0] * 1000 + elapsed[1] / 1000000).toFixed(3);
}
exports.getElapsedTime = getElapsedTime;
function copyDir(src, dest) {
    fs.mkdirSync(dest, { recursive: true });
    const entries = fs.readdirSync(src, { withFileTypes: true });
    entries.map((entry) => {
        const srcPath = (0, path_1.join)(src, entry.name);
        const destPath = (0, path_1.join)(dest, entry.name);
        return entry.isDirectory() ? copyDir(srcPath, destPath) : fs.copyFileSync(srcPath, destPath);
    });
}
exports.copyDir = copyDir;
//# sourceMappingURL=srcDevUtils.js.map