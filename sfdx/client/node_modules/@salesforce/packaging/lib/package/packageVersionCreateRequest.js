"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.byId = exports.list = void 0;
const util = require("util");
const core_1 = require("@salesforce/core");
const packageUtils = require("../utils/packageUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/packaging', 'messages');
const STATUS_ERROR = 'Error';
const QUERY = 'SELECT Id, Status, Package2Id, Package2VersionId, Package2Version.SubscriberPackageVersionId, Tag, Branch, ' +
    'CreatedDate, Package2Version.HasMetadataRemoved, CreatedById ' +
    'FROM Package2VersionCreateRequest ' +
    '%s' + // WHERE, if applicable
    'ORDER BY CreatedDate';
const ERROR_QUERY = "SELECT Message FROM Package2VersionCreateRequestError WHERE ParentRequest.Id = '%s'";
const STATUSES = ['Queued', 'InProgress', 'Success', 'Error'];
async function list(options = {}) {
    const whereClause = _constructWhere();
    return _query(util.format(QUERY, whereClause), options.connection);
}
exports.list = list;
async function byId(packageVersionCreateRequestId, connection) {
    const results = await _query(util.format(QUERY, `WHERE Id = '${packageVersionCreateRequestId}' `), connection);
    if (results && results.length === 1 && results[0].Status === STATUS_ERROR) {
        results[0].Error = await _queryErrors(packageVersionCreateRequestId, connection);
    }
    return results;
}
exports.byId = byId;
async function _query(query, connection) {
    const queryResult = await connection.tooling.query(query);
    return (queryResult.records ? queryResult.records : []).map((record) => ({
        Id: record.Id,
        Status: record.Status,
        Package2Id: record.Package2Id,
        Package2VersionId: record.Package2VersionId,
        SubscriberPackageVersionId: record.Package2Version != null ? record.Package2Version.SubscriberPackageVersionId : null,
        Tag: record.Tag,
        Branch: record.Branch,
        Error: [],
        CreatedDate: packageUtils.formatDate(new Date(record.CreatedDate)),
        HasMetadataRemoved: record.Package2Version != null ? record.Package2Version.HasMetadataRemoved : null,
        CreatedBy: record.CreatedById,
    }));
}
async function _queryErrors(packageVersionCreateRequestId, connection) {
    const errorResults = [];
    const queryResult = connection.tooling.query(util.format(ERROR_QUERY, packageVersionCreateRequestId));
    if (queryResult.records) {
        queryResult.records.forEach((record) => {
            errorResults.push(record.Message);
        });
    }
    return errorResults;
}
function _constructWhere(options) {
    const where = [];
    // filter on created date, days ago: 0 for today, etc
    if (!util.isNullOrUndefined(this.options.createdlastdays)) {
        if (options.createdlastdays < 0) {
            throw messages.createError('invalidDaysNumber', ['createdlastdays', options.createdlastdays]);
        }
        where.push(`CreatedDate = LAST_N_DAYS:${this.options.createdlastdays}`);
    }
    // filter on errors
    if (options.status) {
        const foundStatus = STATUSES.find((status) => status.toLowerCase() === this.options.status.toLowerCase());
        if (!foundStatus) {
            const args = [options.status];
            STATUSES.forEach((status) => {
                args.push(status);
            });
            throw messages.createError('invalidStatus', args);
        }
        where.push(`Status = '${foundStatus}'`);
    }
    return where.length > 0 ? `WHERE ${where.join(' AND ')}` : '';
}
//# sourceMappingURL=packageVersionCreateRequest.js.map