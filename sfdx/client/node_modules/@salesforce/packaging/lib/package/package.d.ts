import { AsyncCreatable, Duration } from '@salesforce/kit';
import { QueryResult } from 'jsforce';
import { Optional } from '@salesforce/ts-types';
import { IPackage, PackageOptions, PackagingSObjects, PackageInstallOptions, PackageInstallCreateRequest, PackageIdType } from '../interfaces';
declare type PackageInstallRequest = PackagingSObjects.PackageInstallRequest;
/**
 * Package class.
 *
 * This class provides the base implementation for a package.
 */
export declare class Package extends AsyncCreatable<PackageOptions> implements IPackage {
    private options;
    constructor(options: PackageOptions);
    /**
     * Given a Salesforce ID for a package resource and the type of resource,
     * ensures the ID is valid.
     *
     * Valid ID types and prefixes for packaging resources:
     * 1. package ID (0Ho)
     * 2. subscriber package version ID (04t)
     * 3. package install request ID (0Hf)
     * 4. package uninstall request ID (06y)
     *
     * @param id Salesforce ID for a specific package resource
     * @param type The type of package ID
     */
    static validateId(id: string, type: PackageIdType): void;
    convert(): Promise<void>;
    create(): Promise<void>;
    delete(): Promise<void>;
    install(pkgInstallCreateRequest: PackageInstallCreateRequest, options?: PackageInstallOptions): Promise<PackageInstallRequest>;
    getInstallStatus(installRequestId: string): Promise<PackageInstallRequest>;
    list(): Promise<QueryResult<PackagingSObjects.Package2>>;
    uninstall(): Promise<void>;
    update(): Promise<void>;
    getPackage(packageId: string): Promise<PackagingSObjects.Package2>;
    getExternalSites(subscriberPackageVersionId: string, installationKey?: string): Promise<Optional<string[]>>;
    waitForPublish(subscriberPackageVersionId: string, timeout: number | Duration, installationKey?: string): Promise<void>;
    protected init(): Promise<void>;
}
export {};
