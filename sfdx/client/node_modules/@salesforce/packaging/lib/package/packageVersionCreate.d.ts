import { PackageVersionCreateOptions, PackageVersionCreateRequestResult } from '../interfaces';
export declare class PackageVersionCreate {
    private options;
    private apiVersionFromPackageXml;
    private readonly project;
    private readonly connection;
    private packageObject;
    private packageType;
    private packageId;
    private packageAlias;
    constructor(options: PackageVersionCreateOptions);
    createPackageVersion(): Promise<Partial<PackageVersionCreateRequestResult>>;
    private generateMDFolderForArtifact;
    private validateDependencyValues;
    /**
     * A dependency in the workspace config file may be specified using either a subscriber package version id (04t)
     * or a package Id (0Ho) + a version number.  Additionally, a build number may be the actual build number, or a
     * keyword: LATEST or RELEASED (meaning the latest or released build number for a given major.minor.patch).
     *
     * This method resolves a package Id + version number to a subscriber package version id (04t)
     * and adds it as a SubscriberPackageVersionId parameter in the dependency object.
     */
    private retrieveSubscriberPackageVersionId;
    private resolveBuildNumber;
    private createRequestObject;
    /**
     * Convert the list of command line options to a JSON object that can be used to create an Package2VersionCreateRequest entity.
     *
     * @returns {{Package2Id: (*|p|boolean), Package2VersionMetadata: *, Tag: *, Branch: number}}
     * @private
     */
    private createPackageVersionCreateRequestFromOptions;
    private cleanGeneratedPackage;
    private resolveApexTestPermissions;
    private resolveUnpackagedMetadata;
    private packageVersionCreate;
    private resolveUserLicenses;
    private validateOptionsForPackageType;
    /**
     * Cleans invalid attribute(s) from the packageDescriptorJSON
     */
    private cleanPackageDescriptorJson;
    /**
     * Sets default or override values for packageDescriptorJSON attribs
     */
    private setPackageDescriptorJsonValues;
}
