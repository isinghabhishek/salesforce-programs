"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uninstallPackage = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const os = require("os");
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/packaging', 'messages');
async function poll(id, conn) {
    const uninstallRequest = await conn.tooling.sobject('SubscriberPackageVersionUninstallRequest').retrieve(id);
    switch (uninstallRequest.Status) {
        case 'Success': {
            return { completed: true, payload: uninstallRequest };
        }
        case 'InProgress':
        case 'Queued': {
            core_1.Lifecycle.getInstance().emit('packageUninstall', {
                ...uninstallRequest,
            });
            return { completed: false, payload: uninstallRequest };
        }
        default: {
            const err = messages.getMessage('defaultErrorMessage', [id, uninstallRequest.Id]);
            const errorQueryResult = await conn.tooling.query(`"SELECT Message FROM PackageVersionUninstallRequestError WHERE ParentRequest.Id = '${id}' ORDER BY Message"`);
            const errors = [];
            if (errorQueryResult.records.length) {
                errors.push('\n=== Errors\n');
                errorQueryResult.records.forEach((record) => {
                    errors.push(`(${errors.length}) ${record.Message}${os.EOL}`);
                });
            }
            throw new core_1.SfError(`${err}${errors.join(os.EOL)}`, 'UNINSTALL_ERROR', [
                messages.getMessage('uninstallErrorAction'),
            ]);
        }
    }
}
async function uninstallPackage(id, conn, wait = kit_1.Duration.seconds(0)) {
    const uninstallRequest = await conn.tooling.sobject('SubscriberPackageVersionUninstallRequest').create({
        SubscriberPackageVersionId: id,
    });
    if (wait.seconds === 0) {
        return (await conn.tooling
            .sobject('SubscriberPackageVersionUninstallRequest')
            .retrieve(uninstallRequest.id));
    }
    else {
        const pollingClient = await core_1.PollingClient.create({
            poll: () => poll(uninstallRequest.id, conn),
            frequency: kit_1.Duration.seconds(5),
            timeout: wait,
        });
        return pollingClient.subscribe();
    }
}
exports.uninstallPackage = uninstallPackage;
//# sourceMappingURL=packageUninstall.js.map