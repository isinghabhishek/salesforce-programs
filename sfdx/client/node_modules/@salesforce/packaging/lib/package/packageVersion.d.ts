import { Duration } from '@salesforce/kit';
import { PackageSaveResult, PackageVersionCreateOptions, PackageVersionCreateRequestResult, PackageVersionListOptions, PackageVersionListResult, PackageVersionOptions, PackageVersionReportResult } from '../interfaces';
export declare class PackageVersion {
    private options;
    private readonly project;
    private readonly connection;
    constructor(options: PackageVersionOptions);
    /**
     * Creates a new package version.
     *
     * @param options
     * @param polling frequency and timeout Durations to be used in polling
     */
    create(options: PackageVersionCreateOptions, polling?: {
        frequency: Duration;
        timeout: Duration;
    }): Promise<Partial<PackageVersionCreateRequestResult>>;
    /**
     * Deletes a package version.
     *
     * @param idOrAlias
     */
    delete(idOrAlias: string): Promise<PackageSaveResult>;
    /**
     * Undeletes a package version.
     *
     * @param idOrAlias
     */
    undelete(idOrAlias: string): Promise<PackageSaveResult>;
    /**
     * Gets the package version report.
     *
     * @param createPackageRequestId
     * @param verbose
     */
    report(createPackageRequestId: string, verbose?: boolean): Promise<PackageVersionReportResult>;
    /**
     * Gets current state of a package version create request.
     *
     * @param createPackageRequestId
     */
    getCreateVersionReport(createPackageRequestId: string): Promise<PackageVersionCreateRequestResult>;
    /**
     * Convenience function that will wait for a package version to be created.
     *
     * This function emits LifeCycle events, "enqueued", "in-progress", "success", "error" and "timed-out" to
     * progress and current status. Events also carry a payload of type PackageVersionCreateRequestResult.
     *
     * @param packageId - The package id to wait for
     * @param createPackageVersionRequestId
     * @param polling frequency and timeout Durations to be used in polling
     * */
    waitForCreateVersion(createPackageVersionRequestId: string, polling: {
        frequency: Duration;
        timeout: Duration;
    }): Promise<PackageVersionCreateRequestResult>;
    convert(): Promise<void>;
    install(): Promise<void>;
    list(options: PackageVersionListOptions): Promise<PackageVersionListResult[]>;
    uninstall(): Promise<void>;
    promote(id: string): Promise<PackageSaveResult>;
    update(): Promise<void>;
    private updateDeprecation;
    private updateProjectWithPackageVersion;
}
