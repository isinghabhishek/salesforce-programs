"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTableChoices = exports.Prompter = void 0;
const inquirer_1 = require("inquirer");
const ts_types_1 = require("@salesforce/ts-types");
const core_1 = require("@oclif/core");
class Prompter {
    /**
     * Prompt user for information. See https://www.npmjs.com/package/inquirer for more.
     */
    async prompt(questions, initialAnswers) {
        const answers = await (0, inquirer_1.prompt)(questions, initialAnswers);
        return answers;
    }
    /**
     * Prompt user for information with a timeout (in milliseconds). See https://www.npmjs.com/package/inquirer for more.
     */
    async timedPrompt(questions, ms = 10000, initialAnswers) {
        let id;
        const thePrompt = (0, inquirer_1.prompt)(questions, initialAnswers);
        const timeout = new Promise((_, reject) => {
            id = setTimeout(() => {
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-expect-error
                // eslint-disable-next-line @typescript-eslint/no-unsafe-call
                thePrompt.ui['activePrompt'].done();
                core_1.CliUx.ux.log();
                reject(new Error(`Timed out after ${ms} ms.`));
            }, ms).unref();
        });
        return Promise.race([timeout, thePrompt]).then((result) => {
            clearTimeout(id);
            return result;
        });
    }
}
exports.Prompter = Prompter;
/**
 * Generate a formatted table for list and checkbox prompts
 *
 * Each option should contain the same keys as specified in columns.
 * For example,
 * const columns = { name: 'Name', type: 'Type', path: 'Path' };
 * const options = [{ name: 'foo', type: 'org', path: '/path/to/foo/' }];
 * generateTableChoices(columns, options);
 */
function generateTableChoices(columns, choices, 
// eslint-disable-next-line @typescript-eslint/no-unused-vars
padForCheckbox = true) {
    const columnEntries = Object.entries(columns);
    const columnLengths = columnEntries.map(([key, value]) => Math.max((0, ts_types_1.ensureString)(value).length, ...choices.map((option) => (0, ts_types_1.ensureString)(option[key], `Type ${typeof option[key]} for ${key} in ${Object.keys(option).join(', ')}`)
        .length)) + 1);
    const choicesOptions = [
        new inquirer_1.Separator(`${padForCheckbox ? ' '.repeat(2) : ''}${columnEntries
            .map(([, value], index) => value === null || value === void 0 ? void 0 : value.padEnd(columnLengths[index], ' '))
            .join('')}`),
    ];
    for (const meta of choices) {
        const name = columnEntries
            .map(([key], index) => (0, ts_types_1.ensureString)(meta[key]).padEnd(columnLengths[index], ' '))
            .join('');
        const choice = { name, value: meta.value, short: (0, ts_types_1.ensureString)(meta.name) };
        choicesOptions.push(choice);
    }
    return choicesOptions;
}
exports.generateTableChoices = generateTableChoices;
//# sourceMappingURL=prompter.js.map