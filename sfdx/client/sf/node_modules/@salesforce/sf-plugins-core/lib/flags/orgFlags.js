"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.requiredHubFlag = exports.requiredOrgFlag = exports.optionalOrgFlag = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/sf-plugins-core', 'messages');
const maybeGetOrg = async (input) => {
    try {
        return await core_2.Org.create({ aliasOrUsername: input });
    }
    catch (e) {
        if (!input) {
            return undefined;
        }
        else {
            throw e;
        }
    }
};
const getOrgOrThrow = async (input) => {
    const org = await maybeGetOrg(input);
    if (!org) {
        throw messages.createError('errors.NoDefaultEnv');
    }
    return org;
};
const getHubOrThrow = async (aliasOrUsername) => {
    var _a;
    if (!aliasOrUsername) {
        // check config for a default
        const config = await core_2.ConfigAggregator.create();
        aliasOrUsername = (_a = config.getInfo(core_2.OrgConfigProperties.TARGET_DEV_HUB)) === null || _a === void 0 ? void 0 : _a.value;
        if (!aliasOrUsername) {
            throw messages.createError('errors.NoDefaultDevHub');
        }
    }
    const org = await core_2.Org.create({ aliasOrUsername });
    if (await org.determineIfDevHubOrg()) {
        return org;
    }
    throw messages.createError('errors.NotADevHub', [aliasOrUsername]);
};
/**
 * An optional org specified by username or alias
 * Will default to the default org if one is not specified.
 * Will not throw if the specified org and default do not exist
 *
 * @example
 * import { SfCommand, Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // setting length or prefix
 *    'target-org': Flags.optionalOrg(),
 *    // adding properties
 *    'flag2': Flags.optionalOrg({
 *        required: true,
 *        description: 'flag2 description',
 *     }),
 * }
 */
exports.optionalOrgFlag = core_1.Flags.custom({
    char: 'e',
    parse: async (input) => await maybeGetOrg(input),
    default: async () => await maybeGetOrg(),
    defaultHelp: async () => { var _a; return (_a = (await maybeGetOrg())) === null || _a === void 0 ? void 0 : _a.getUsername(); },
});
/**
 * A required org, specified by username or alias
 * Will throw if the specified org default do not exist
 * Will default to the default org if one is not specified.
 * Will throw if no default org exists and none is specified
 *
 * @example
 * import { SfCommand, Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // setting length or prefix
 *    'target-org': Flags.requiredOrg(),
 *    // adding properties
 *    'flag2': Flags.requiredOrg({
 *        required: true,
 *        description: 'flag2 description',
 *        char: 'o'
 *     }),
 * }
 */
exports.requiredOrgFlag = core_1.Flags.custom({
    char: 'e',
    parse: async (input) => await getOrgOrThrow(input),
    default: async () => await getOrgOrThrow(),
    defaultHelp: async () => { var _a; return (_a = (await getOrgOrThrow())) === null || _a === void 0 ? void 0 : _a.getUsername(); },
});
/**
 * A required org that is a devHub
 * Will throw if the specified org does not exist
 * Will default to the default dev hub if one is not specified
 * Will throw if no default deb hub exists and none is specified
 *
 * @example
 * import { SfCommand, Flags } from '@salesforce/sf-plugins-core';
 * public static flags = {
 *     // setting length or prefix
 *    'target-org': requiredHub(),
 *    // adding properties
 *    'flag2': requiredHub({
 *        required: true,
 *        description: 'flag2 description',
 *        char: 'h'
 *     }),
 * }
 */
exports.requiredHubFlag = core_1.Flags.custom({
    char: 'v',
    parse: async (input) => await getHubOrThrow(input),
    default: async () => await getHubOrThrow(),
    defaultHelp: async () => { var _a; return (_a = (await getHubOrThrow())) === null || _a === void 0 ? void 0 : _a.getUsername(); },
});
//# sourceMappingURL=orgFlags.js.map