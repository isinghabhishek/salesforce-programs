"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.toHelpSection = void 0;
const core_1 = require("@salesforce/core");
/**
 * Function to build a help section for command help.
 * Takes a string to be used as section header text and an array of enums
 * that identify the variable or property to be included in the help
 * body.
 *
 * @param header
 * @param vars
 */
function toHelpSection(header, ...vars) {
    const body = vars
        .flatMap((v) => {
        if (typeof v === 'string') {
            const orgConfig = core_1.ORG_CONFIG_ALLOWED_PROPERTIES.find(({ key }) => {
                return key === v;
            });
            if (orgConfig) {
                return { name: orgConfig.key, description: orgConfig.description };
            }
            const sfdxProperty = core_1.SFDX_ALLOWED_PROPERTIES.find(({ key }) => key === v);
            if (sfdxProperty) {
                return { name: sfdxProperty.key.valueOf(), description: sfdxProperty.description };
            }
            const envVar = Object.entries(core_1.SUPPORTED_ENV_VARS).find(([k]) => k === v);
            if (envVar) {
                const [eKey, data] = envVar;
                return { name: eKey, description: data.description };
            }
            return undefined;
        }
        else {
            return Object.entries(v).map(([name, description]) => ({ name, description }));
        }
    })
        .filter((b) => b);
    return { header, body };
}
exports.toHelpSection = toHelpSection;
//# sourceMappingURL=util.js.map