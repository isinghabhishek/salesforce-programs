"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnSet = void 0;
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const config_1 = require("../../config");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-config', 'unset');
class UnSet extends config_1.ConfigCommand {
    async run() {
        const { argv, flags } = await this.parse(UnSet);
        if (!argv || argv.length === 0) {
            throw messages.createError('error.NoConfigKeysFound');
        }
        else {
            const config = await core_2.Config.create(core_2.Config.getDefaultOptions(flags.global));
            await config.read();
            argv.forEach((key) => {
                try {
                    config.unset(key);
                    this.responses.push({ name: key, success: true });
                }
                catch (err) {
                    this.pushFailure(key, err);
                }
            });
            await config.write();
            if (!this.jsonEnabled()) {
                this.output('Unset Config', false);
            }
        }
        return this.responses;
    }
}
exports.UnSet = UnSet;
UnSet.description = messages.getMessage('description');
UnSet.summary = messages.getMessage('summary');
UnSet.examples = messages.getMessages('examples');
UnSet.strict = false;
UnSet.configurationVariablesSection = config_1.CONFIG_HELP_SECTION;
UnSet.flags = {
    global: core_1.Flags.boolean({
        char: 'g',
        summary: messages.getMessage('flags.global.summary'),
    }),
};
//# sourceMappingURL=unset.js.map