"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Set = void 0;
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const config_1 = require("../../config");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-config', 'set');
class Set extends config_1.ConfigCommand {
    async run() {
        const { flags } = await this.parse(Set);
        const config = await this.loadConfig(flags.global);
        let value = '';
        const configs = await this.parseConfigKeysAndValues();
        for (const name of Object.keys(configs)) {
            try {
                value = configs[name];
                // core's builtin config validation requires synchronous functions but there's
                // currently no way to validate an org synchronously. Therefore, we have to manually
                // validate the org here and manually set the error message if it fails
                if (this.isOrgKey(name) && value)
                    await this.validateOrg(value);
                config.set(name, value);
                this.responses.push({ name, value, success: true });
            }
            catch (err) {
                this.pushFailure(name, err, value);
            }
        }
        await config.write();
        if (!this.jsonEnabled()) {
            this.output('Set Config', false);
        }
        return this.responses;
    }
    async resolveArguments() {
        const { args, argv } = await this.parse(Set);
        const argVals = Object.values(args);
        return argv.filter((val) => !argVals.includes(val));
    }
    async parseConfigKeysAndValues() {
        const configs = {};
        const args = await this.resolveArguments();
        if (!args.length) {
            throw messages.createError('error.ArgumentsRequired');
        }
        // Support `config set key value`
        if (args.length === 2 && !args[0].includes('=')) {
            return { [args[0]]: args[1] };
        }
        // Ensure that all args are in the right format (e.g. key=value key1=value1)
        args.forEach((arg) => {
            const split = arg.split('=');
            if (split.length !== 2) {
                throw messages.createError('error.InvalidArgumentFormat', [arg]);
            }
            const [name, value] = split;
            if (configs[name]) {
                throw messages.createError('error.DuplicateArgument', [name]);
            }
            configs[name] = value || undefined;
        });
        return configs;
    }
    async loadConfig(global) {
        try {
            const config = await core_2.Config.create(core_2.Config.getDefaultOptions(global));
            await config.read();
            return config;
        }
        catch (error) {
            if (error instanceof core_2.SfdxError) {
                error.actions = error.actions || [];
                error.actions.push('Run with --global to set for your entire workspace.');
            }
            throw error;
        }
    }
    isOrgKey(name) {
        const orgKeys = [core_2.OrgConfigProperties.TARGET_DEV_HUB, core_2.OrgConfigProperties.TARGET_ORG];
        return orgKeys.includes(name);
    }
    async validateOrg(value) {
        try {
            await core_2.Org.create({ aliasOrUsername: value });
        }
        catch {
            throw new Error(`Invalid config value: org "${value}" is not authenticated.`);
        }
    }
}
exports.Set = Set;
Set.description = messages.getMessage('description');
Set.summary = messages.getMessage('summary');
Set.examples = messages.getMessages('examples');
Set.strict = false;
Set.flags = {
    global: core_1.Flags.boolean({
        char: 'g',
        summary: messages.getMessage('flags.global.summary'),
    }),
};
Set.configurationVariablesSection = config_1.CONFIG_HELP_SECTION;
//# sourceMappingURL=set.js.map