"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigCommand = exports.CONFIG_HELP_SECTION = void 0;
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const sf_plugins_core_2 = require("@salesforce/sf-plugins-core");
exports.CONFIG_HELP_SECTION = (0, sf_plugins_core_2.toHelpSection)('CONFIGURATION VARIABLES', core_1.SfdxPropertyKeys.API_VERSION, core_1.SfdxPropertyKeys.DISABLE_TELEMETRY, core_1.SfdxPropertyKeys.INSTANCE_URL, core_1.SfdxPropertyKeys.MAX_QUERY_LIMIT, core_1.SfdxPropertyKeys.REST_DEPLOY, core_1.OrgConfigProperties.TARGET_ORG, core_1.OrgConfigProperties.TARGET_DEV_HUB);
class ConfigCommand extends sf_plugins_core_1.SfCommand {
    constructor() {
        super(...arguments);
        this.responses = [];
    }
    pushSuccess(configInfo) {
        this.responses.push({
            name: configInfo.key,
            value: configInfo.value,
            success: true,
            location: configInfo.location,
        });
    }
    pushFailure(name, err, value) {
        const error = core_1.SfdxError.wrap(err);
        this.responses.push({
            name,
            success: false,
            value,
            error,
            message: error.message.replace(/\.\.$/, '.'),
        });
        process.exitCode = 1;
    }
    output(title, verbose) {
        if (this.responses.length === 0) {
            this.log('No results found');
            return;
        }
        const columns = {
            name: { header: 'Name' },
        };
        if (!title.includes('Unset')) {
            columns.value = {
                header: 'Value',
                get: (row) => { var _a; return (_a = row.value) !== null && _a !== void 0 ? _a : ''; },
            };
        }
        if (!title.includes('List')) {
            columns.success = { header: 'Success' };
        }
        if (verbose) {
            columns.location = {
                header: 'Location',
                get: (row) => { var _a; return (_a = row.location) !== null && _a !== void 0 ? _a : ''; },
            };
        }
        if (this.responses.find((msg) => msg.error)) {
            columns.message = {
                header: 'Message',
                get: (row) => { var _a; return (_a = row.message) !== null && _a !== void 0 ? _a : ''; },
            };
            this.responses.map((msg) => { var _a; return (msg.message = (_a = msg.error) === null || _a === void 0 ? void 0 : _a.message); });
        }
        this.table(this.responses, columns, { title });
    }
}
exports.ConfigCommand = ConfigCommand;
//# sourceMappingURL=config.js.map