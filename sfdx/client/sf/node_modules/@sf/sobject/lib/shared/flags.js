"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.isTabsFolder = exports.isObjectsFolder = exports.labelValidation = void 0;
const path_1 = require("path");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-sobject', 'flags', [
    'error.labelLength',
    'error.objectDirectory',
    'error.tabsDirectory',
]);
// eslint-disable-next-line @typescript-eslint/require-await
const labelValidation = async (label) => {
    if (label.length < 3) {
        throw new core_1.SfError(messages.getMessage('error.labelLength', [label]));
    }
    return label;
};
exports.labelValidation = labelValidation;
/**
 * Validates that a path contains /objects/ and at least one directory beyond that
 *
 * @param path: relative or full path
 * @returns true if valid
 */
// eslint-disable-next-line @typescript-eslint/require-await
const isObjectsFolder = async (path) => {
    const pathParts = (0, path_1.resolve)(path.trim()).split(path_1.sep);
    // has /objects/ AND objects is not the last item (there must be some child)
    if (pathParts.includes('objects') && pathParts[pathParts.length - 1] !== 'objects') {
        return path;
    }
    throw new core_1.SfError(messages.getMessage('error.objectDirectory', [path]));
};
exports.isObjectsFolder = isObjectsFolder;
/**
 * Validates that a path ends in /tabs
 *
 * @param path: relative or full path
 * @returns true if valid
 */
// eslint-disable-next-line @typescript-eslint/require-await
const isTabsFolder = async (path) => {
    // resolve will remove trailing separator
    const trimmed = (0, path_1.resolve)(path.trim());
    if (trimmed.endsWith('tabs')) {
        return trimmed;
    }
    throw new core_1.SfError(messages.getMessage('error.tabsDirectory', [path]));
};
exports.isTabsFolder = isTabsFolder;
//# sourceMappingURL=flags.js.map