"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.writeObjectFile = exports.getObjectXmlByFolderAsJson = exports.getObjectDirectories = exports.getDirectoriesThatContainObjects = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const fs = require("fs");
const fg = require("fast-glob");
const convert_1 = require("./convert");
const getObjectXmlByPathAsJson = async (objectFilePath) => {
    const xml = await fs.promises.readFile(objectFilePath, 'utf8');
    return (0, convert_1.parseXml)(xml, 'CustomObject');
};
/** globs don't support windows path, but the input might be */
const ensurePosixPath = (filePath) => filePath.split(path.sep).join(path.posix.sep);
/**
 * @param targetPaths typically your pkgDirs or project path
 * @returns directories that end in `/objects/`
 */
const getDirectoriesThatContainObjects = async (targetPaths) => {
    const globs = targetPaths.map((p) => `${ensurePosixPath(p)}/**/objects/`);
    return (await fg(globs, { onlyDirectories: true })).map((dir) => path.normalize(dir));
};
exports.getDirectoriesThatContainObjects = getDirectoriesThatContainObjects;
/**
 * @param targetPaths typically your pkgDirs or project path
 * @returns directories that are children of `/objects/` like `force-app/main/default/objects/Foo__c`
 */
const getObjectDirectories = async (targetPaths) => {
    const globs = targetPaths.map((p) => `${ensurePosixPath(p)}/**/objects/*`);
    return (await fg(globs, { onlyDirectories: true })).map((dir) => path.normalize(dir));
};
exports.getObjectDirectories = getObjectDirectories;
/**
 * @param folder folder path to the object name (ex: `force-app/main/default/objects/Account`)
 * @returns CustomObject in json
 */
const getObjectXmlByFolderAsJson = async (folder) => {
    const globs = `${ensurePosixPath(folder)}/*.object-meta.xml`;
    const [objectMetaPath] = await fg(globs);
    return getObjectXmlByPathAsJson(objectMetaPath);
};
exports.getObjectXmlByFolderAsJson = getObjectXmlByFolderAsJson;
/**
 *
 * @returns path where the object was written
 */
const writeObjectFile = async (objectDirectory, object) => {
    await fs.promises.mkdir(path.join(objectDirectory, object.fullName), { recursive: true });
    const targetFile = path.join(objectDirectory, object.fullName, `${object.fullName}.object-meta.xml`);
    await fs.promises.writeFile(targetFile, (0, convert_1.convertJsonToXml)({ json: object, type: 'CustomObject' }));
    return targetFile;
};
exports.writeObjectFile = writeObjectFile;
//# sourceMappingURL=fs.js.map