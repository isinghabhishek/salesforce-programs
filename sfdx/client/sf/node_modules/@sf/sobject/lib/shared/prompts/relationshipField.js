"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.relationshipFieldPrompts = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const inquirer_1 = require("inquirer");
const core_1 = require("@salesforce/core");
const fs_1 = require("../fs");
const prompts_1 = require("./prompts");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-sobject', 'prompts.relationship', [
    'objectPrompt',
    'lookupDeleteConstraint',
    'lookupDeleteConstraint.setNull',
    'lookupDeleteConstraint.restrict',
    'lookupDeleteConstraint.cascade',
    'writeRequiresMasterRead',
    'reparentableMasterDetail',
]);
const relationshipFieldPrompts = async ({ type, packageDirs, childObjectFolderPath, }) => {
    const childObjectXml = await (0, fs_1.getObjectXmlByFolderAsJson)(childObjectFolderPath);
    const response = await (0, inquirer_1.prompt)([
        // prompt the user to select from objects in local source
        await (0, prompts_1.objectPrompt)(packageDirs, 'referenceTo', messages.getMessage('objectPrompt')),
        {
            type: 'input',
            name: 'relationshipLabel',
            message: 'Relationship label',
            default: childObjectXml.pluralLabel,
        },
        {
            type: 'input',
            name: 'relationshipName',
            message: 'Relationship name',
            default: (answers) => (0, prompts_1.makeNameApiCompatible)(answers.relationshipLabel),
        },
        // lookup-only
        {
            type: 'list',
            name: 'deleteConstraint',
            message: messages.getMessage('lookupDeleteConstraint'),
            when: type === 'Lookup',
            default: 'SetNull',
            choices: [
                {
                    value: 'SetNull',
                    name: messages.getMessage('lookupDeleteConstraint.setNull'),
                },
                {
                    value: 'Restrict',
                    name: messages.getMessage('lookupDeleteConstraint.restrict'),
                },
                {
                    value: 'Cascade',
                    name: messages.getMessage('lookupDeleteConstraint.cascade'),
                },
            ],
        },
        // master-detail only
        {
            type: 'confirm',
            name: 'reparentableMasterDetail',
            message: messages.getMessage('reparentableMasterDetail'),
            when: type === 'MasterDetail',
            default: false,
        },
        {
            type: 'confirm',
            name: 'writeRequiresMasterRead',
            message: messages.getMessage('writeRequiresMasterRead'),
            when: type === 'MasterDetail',
            default: false,
        },
    ]);
    return {
        ...response,
        referenceTo: response.referenceTo.split(path.sep).pop(),
    };
};
exports.relationshipFieldPrompts = relationshipFieldPrompts;
//# sourceMappingURL=relationshipField.js.map