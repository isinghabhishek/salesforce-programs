"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path_1 = require("path");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const change_case_1 = require("change-case");
const prompts_1 = require("../../../shared/prompts/prompts");
const fs_1 = require("../../../shared/fs");
const flags_1 = require("../../../shared/flags");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-sobject', 'generate.object', [
    'examples',
    'summary',
    'description',
    'flags.label.summary',
    'flags.use-default-features.summary',
    'flags.use-default-features.description',
    'prompts.sharingModel',
    'success',
    'success.advice',
    'success.field',
]);
const defaultFeatures = {
    enableHistory: true,
    enableActivities: true,
    enableSearch: true,
    enableFeeds: true,
    enableReports: true,
    enableBulkApi: true,
    enableSharing: true,
    enableStreamingApi: true,
};
class ObjectGenerate extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(ObjectGenerate);
        const responses = await this.prompt([
            await (0, prompts_1.directoryPrompt)(this.project.getPackageDirectories()),
            (0, prompts_1.pluralPrompt)(flags.label),
            (0, prompts_1.apiNamePrompt)(flags.label, 'CustomObject'),
            prompts_1.descriptionPrompt,
            ...(0, prompts_1.namePrompts)(flags.label),
            // transform the default features into confirm prompts
            ...Object.keys(defaultFeatures).map((name) => ({
                type: 'confirm',
                name,
                message: (0, change_case_1.sentenceCase)(name).replace('Api', 'API'),
            })),
            {
                type: 'list',
                choices: ['ReadWrite', 'Read', 'Private'],
                message: messages.getMessage('prompts.sharingModel'),
                name: 'sharingModel',
            },
        ], flags['use-default-features'] ? defaultFeatures : {});
        const { nameFieldType, nameFieldLabel, autoNumberFormat, directory, ...customObject } = responses;
        const resultsObject = {
            ...customObject,
            nameField: {
                ...{
                    type: nameFieldType,
                    label: nameFieldLabel,
                },
                ...(responses.nameFieldType === 'AutoNumber' ? { displayFormat: autoNumberFormat } : {}),
            },
            deploymentStatus: 'Deployed',
            label: flags.label,
        };
        this.styledJSON(resultsObject);
        const writePath = await (0, fs_1.writeObjectFile)(directory, resultsObject);
        this.logSuccess(messages.getMessage('success', [writePath]));
        this.info(messages.getMessage('success.field', [(0, path_1.dirname)(writePath)]));
        this.log();
        this.info(messages.getMessage('success.advice'));
        return { object: resultsObject, path: writePath };
    }
}
exports.default = ObjectGenerate;
_a = ObjectGenerate;
ObjectGenerate.summary = messages.getMessage('summary');
ObjectGenerate.description = messages.getMessage('description');
ObjectGenerate.examples = messages.getMessages('examples');
ObjectGenerate.requiresProject = true;
ObjectGenerate.enableJsonFlag = false;
ObjectGenerate.state = 'beta';
ObjectGenerate.flags = {
    label: sf_plugins_core_1.Flags.string({
        char: 'l',
        summary: messages.getMessage('flags.label.summary'),
        required: true,
        parse: async (label) => (0, flags_1.labelValidation)(label),
    }),
    'use-default-features': sf_plugins_core_1.Flags.boolean({
        char: 'f',
        summary: messages.getMessage('flags.use-default-features.summary'),
        description: messages.getMessage('flags.use-default-features.description'),
    }),
};
//# sourceMappingURL=sobject.js.map