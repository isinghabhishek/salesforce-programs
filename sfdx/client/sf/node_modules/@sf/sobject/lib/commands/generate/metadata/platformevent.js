"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const core_1 = require("@salesforce/core");
const prompts_1 = require("../../../shared/prompts/prompts");
const fs_1 = require("../../../shared/fs");
const flags_1 = require("../../../shared/flags");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.load('@salesforce/plugin-sobject', 'generate.event', [
    'examples',
    'summary',
    'description',
    'flags.label.summary',
    'prompts.publishBehavior',
]);
class ObjectGenerate extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(ObjectGenerate);
        const responses = await this.prompt([
            await (0, prompts_1.directoryPrompt)(this.project.getPackageDirectories()),
            (0, prompts_1.pluralPrompt)(flags.label),
            (0, prompts_1.apiNamePrompt)(flags.label, 'PlatformEvent'),
            prompts_1.descriptionPrompt,
            {
                type: 'list',
                message: messages.getMessage('prompts.publishBehavior'),
                name: 'publishBehavior',
                choices: ['PublishImmediately', 'PublishAfterCommit'],
            },
        ]);
        const { directory, ...platformEvent } = responses;
        const objectToWrite = {
            ...platformEvent,
            deploymentStatus: 'Deployed',
            eventType: 'HighVolume',
            label: flags.label,
        };
        this.styledJSON(objectToWrite);
        const writePath = await (0, fs_1.writeObjectFile)(directory, objectToWrite);
        return { object: objectToWrite, path: writePath };
    }
}
exports.default = ObjectGenerate;
_a = ObjectGenerate;
ObjectGenerate.summary = messages.getMessage('summary');
ObjectGenerate.description = messages.getMessage('description');
ObjectGenerate.examples = messages.getMessages('examples');
ObjectGenerate.requiresProject = true;
ObjectGenerate.enableJsonFlag = false;
ObjectGenerate.state = 'beta';
ObjectGenerate.flags = {
    label: sf_plugins_core_1.Flags.string({
        char: 'l',
        summary: messages.getMessage('flags.label.summary'),
        required: true,
        parse: async (label) => (0, flags_1.labelValidation)(label),
    }),
};
//# sourceMappingURL=platformevent.js.map