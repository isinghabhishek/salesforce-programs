"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KEYS = void 0;
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-env', 'list');
function extractData(orgs) {
    return orgs.map((org) => {
        const base = {
            aliases: org.aliases,
            username: org.username,
            orgId: org.orgId,
            instanceUrl: org.instanceUrl,
            oauthMethod: org.oauthMethod,
            configs: org.configs,
        };
        if (org.error)
            base.error = org.error || '';
        return base;
    });
}
exports.KEYS = {
    orgId: 'Org ID',
    oauthMethod: 'Auth Method',
    configs: 'Config',
};
const hook = async function (opts) {
    if (!(await core_1.AuthInfo.hasAuthentications()))
        throw messages.createError('error.NoAuthsAvailable');
    const orgs = opts.all
        ? await core_1.AuthInfo.listAllAuthorizations()
        : await core_1.AuthInfo.listAllAuthorizations((org) => org.isExpired !== true);
    const grouped = {
        nonScratchOrgs: [],
        scratchOrgs: [],
    };
    for (const org of orgs) {
        if (org.isScratchOrg)
            grouped.scratchOrgs.push(org);
        else
            grouped.nonScratchOrgs.push(org);
    }
    const salesforceOrgs = {
        type: sf_plugins_core_1.EnvList.EnvType.salesforceOrgs,
        title: 'Salesforce Orgs',
        data: extractData(grouped.nonScratchOrgs),
        keys: exports.KEYS,
    };
    const scratchOrgs = {
        type: sf_plugins_core_1.EnvList.EnvType.scratchOrgs,
        title: 'Scratch Orgs',
        data: extractData(grouped.scratchOrgs),
        keys: exports.KEYS,
    };
    return [salesforceOrgs, scratchOrgs];
};
exports.default = hook;
//# sourceMappingURL=envList.js.map