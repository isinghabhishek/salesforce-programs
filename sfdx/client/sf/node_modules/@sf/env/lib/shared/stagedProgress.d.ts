import * as chalk from 'chalk';
export declare const boldPurple: chalk.Chalk;
export declare enum State {
    'inProgress' = "inProgress",
    'completed' = "completed",
    'failed' = "failed",
    'unknown' = "unknown"
}
export declare type StageAttributes = {
    state: State;
    char: string;
    color: chalk.Chalk;
    index?: number;
    visited: boolean;
};
export declare const StateConstants: {
    [stage: string]: StageAttributes;
};
export declare type Stage = {
    [stage: string]: StageAttributes;
};
export declare abstract class StagedProgress<T> {
    private dataForTheStatus;
    private theStages;
    private currentStage;
    private previousStage;
    constructor(stages: string[]);
    get statusData(): T;
    set statusData(statusData: T);
    formatStages(): string;
    transitionStages(currentStage: string, newState?: State): void;
    markPreviousStagesAsCompleted(currentStage?: string): void;
    updateCurrentStage(newState: State): void;
    updateStages(currentStage: string, newState?: State): void;
    getStages(): Stage;
    protected mapCurrentStage(currentStage: string): string;
    abstract formatProgressStatus(withClock: boolean): string;
}
