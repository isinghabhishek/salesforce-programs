import { Optional } from '@salesforce/ts-types';
import { AuthFields } from '@salesforce/core';
import { Command, Hook, Hooks } from '@oclif/core/lib/interfaces';
declare type HookOpts<T> = {
    options: {
        Command: Command.Class;
        argv: string[];
        commandId: string;
    };
    return: Optional<T>;
};
export declare type OrgCreateResult = Pick<AuthFields, 'accessToken' | 'clientId' | 'created' | 'createdOrgInstance' | 'devHubUsername' | 'expirationDate' | 'instanceUrl' | 'loginUrl' | 'orgId' | 'username'>;
declare type PostOrgCreateOpts = HookOpts<OrgCreateResult>;
/**
 * Extends OCLIF's Hooks interface to add types for hooks that run on org commands
 */
export interface OrgHooks extends Hooks {
    postorgcreate: PostOrgCreateOpts;
}
export declare type OrgHook<T> = (this: Hook.Context, options: T extends keyof Hooks ? OrgHooks[T] : T) => any;
export declare namespace OrgHook {
    type PostOrgCreate = Hook<OrgHooks['postorgcreate']>;
}
export {};
