"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const utils_1 = require("../../utils");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-env', 'display');
class EnvDisplay extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(EnvDisplay);
        // TODO: access this from ConfigAggregator once target-env config var is supported.
        const targetEnv = flags['target-env'];
        if (!targetEnv)
            throw messages.createError('error.NoDefaultEnv');
        let data = {};
        try {
            const results = await sf_plugins_core_1.SfHook.run(this.config, 'sf:env:display', { targetEnv });
            const result = results.successes.find((s) => !!s.result?.data)?.result || null;
            if (!result) {
                throw messages.createError('error.NoEnvFound', [targetEnv]);
            }
            data = result.data;
            const columns = { key: {}, value: {} };
            const tableData = Object.entries(data).map(([key, value]) => ({
                key: (0, utils_1.toKey)(key, result.keys),
                value: (0, utils_1.toValue)(value),
            }));
            this.logSensitive();
            this.table(tableData, columns);
        }
        catch (error) {
            const err = error;
            this.log(messages.getMessage('error.NoResultsFound'));
            this.error(err);
        }
        return data;
    }
}
exports.default = EnvDisplay;
EnvDisplay.summary = messages.getMessage('summary');
EnvDisplay.description = messages.getMessage('description');
EnvDisplay.examples = messages.getMessages('examples');
EnvDisplay.flags = {
    'target-env': core_1.Flags.string({
        char: 'e',
        summary: messages.getMessage('flags.target-env.summary'),
    }),
};
//# sourceMappingURL=display.js.map