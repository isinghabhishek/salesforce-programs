"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const ts_types_1 = require("@salesforce/ts-types");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const loginUtils_1 = require("../../../loginUtils");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-login', 'login.org.jwt');
class LoginOrgJwt extends sf_plugins_core_1.SfCommand {
    async run() {
        this.flags = (await this.parse(LoginOrgJwt)).flags;
        (0, loginUtils_1.validateInstanceUrl)(this.flags['instance-url']);
        const authInfo = await this.executeJwtOrgFlow();
        await (0, loginUtils_1.handleSideEffects)(authInfo, {
            alias: this.flags.alias,
            setDefault: this.flags['set-default'],
            setDefaultDevHub: this.flags['set-default-dev-hub'],
        });
        const fields = authInfo.getFields(true);
        const successMsg = `Successfully authorized ${fields.username} with ID ${fields.orgId}`;
        this.log(successMsg);
        return {
            alias: fields.alias,
            instanceUrl: fields.instanceUrl,
            orgId: fields.orgId,
            username: fields.username,
            privateKey: fields.privateKey,
        };
    }
    async executeJwtOrgFlow() {
        this.log('Executing salesforce org JWT auth flow...');
        try {
            const oauth2OptionsBase = {
                clientId: this.flags.clientid,
                privateKeyFile: this.flags.keyfile,
            };
            const loginUrl = this.flags['instance-url'];
            const oauth2Options = loginUrl ? { ...oauth2OptionsBase, ...{ loginUrl } } : oauth2OptionsBase;
            let authInfo;
            try {
                authInfo = await core_2.AuthInfo.create({ username: this.flags.username, oauth2Options });
            }
            catch (error) {
                const err = error;
                if (err.name === 'AuthInfoOverwriteError') {
                    this.debug('Auth file already exists. Removing and starting fresh.');
                    const remover = await core_2.AuthRemover.create();
                    await remover.removeAuth(this.flags.username);
                    authInfo = await core_2.AuthInfo.create({
                        username: this.flags.username,
                        oauth2Options,
                    });
                }
                else {
                    throw err;
                }
            }
            await authInfo.save();
            return authInfo;
        }
        catch (err) {
            const msg = (0, ts_types_1.getString)(err, 'message');
            throw messages.createError('errors.JwtGrant', [msg]);
        }
    }
}
exports.default = LoginOrgJwt;
LoginOrgJwt.summary = messages.getMessage('summary');
LoginOrgJwt.description = messages.getMessage('description');
LoginOrgJwt.examples = messages.getMessages('examples');
LoginOrgJwt.flags = {
    alias: core_1.Flags.string({
        summary: messages.getMessage('flags.alias.summary'),
        char: 'a',
        helpValue: '<value>',
    }),
    clientid: core_1.Flags.string({
        summary: messages.getMessage('flags.clientid.summary'),
        char: 'i',
        helpValue: '<value>',
    }),
    'instance-url': core_1.Flags.string({
        summary: messages.getMessage('flags.instance-url.summary'),
        description: messages.getMessage('flags.instance-url.description'),
        default: 'https://login.salesforce.com',
        char: 'l',
        helpValue: '<value>',
    }),
    keyfile: core_1.Flags.string({
        summary: messages.getMessage('flags.keyfile.summary'),
        dependsOn: ['username', 'clientid'],
        char: 'f',
        helpValue: '<value>',
    }),
    'set-default': core_1.Flags.boolean({
        char: 'd',
        summary: messages.getMessage('flags.set-default.summary'),
    }),
    'set-default-dev-hub': core_1.Flags.boolean({
        char: 'v',
        description: messages.getMessage('flags.set-default-dev-hub.summary'),
    }),
    username: core_1.Flags.string({
        summary: messages.getMessage('flags.username.summary'),
        dependsOn: ['keyfile', 'clientid'],
        char: 'u',
        helpValue: '<value>',
    }),
};
LoginOrgJwt.configurationVariablesSection = (0, sf_plugins_core_1.toHelpSection)('CONFIGURATION VARIABLES', core_2.SfdxPropertyKeys.API_VERSION, core_2.SfdxPropertyKeys.INSTANCE_URL);
LoginOrgJwt.envVariablesSection = (0, sf_plugins_core_1.toHelpSection)('ENVIRONMENT VARIABLES', core_2.EnvironmentVariable.SFDX_INSTANCE_URL);
//# sourceMappingURL=jwt.js.map