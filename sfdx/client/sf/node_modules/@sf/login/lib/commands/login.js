"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginTarget = void 0;
const inquirer_1 = require("inquirer");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const loginUtils_1 = require("../loginUtils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-login', 'login');
var LoginTarget;
(function (LoginTarget) {
    LoginTarget["ORG"] = "Salesforce Org";
    LoginTarget["FUNCTIONS"] = "Salesforce Functions";
})(LoginTarget = exports.LoginTarget || (exports.LoginTarget = {}));
const LoginCommands = {
    [LoginTarget.FUNCTIONS]: 'login:functions',
    [LoginTarget.ORG]: 'login:org',
};
class Login extends sf_plugins_core_1.SfCommand {
    async run() {
        const target = await this.promptUserToChooseLoginTarget();
        switch (target) {
            case LoginTarget.ORG:
                return this.executeOrgLogin();
            case LoginTarget.FUNCTIONS:
                return this.executeFunctionsLogin();
            default:
                break;
        }
    }
    async executeOrgLogin() {
        const authInfo = await (0, loginUtils_1.executeOrgWebFlow)();
        const fields = authInfo.getFields(true);
        const sideEffects = await this.promptUserForOrgSideEffects();
        await (0, loginUtils_1.handleSideEffects)(authInfo, sideEffects);
        const successMsg = messages.getMessage('success', [fields.username]);
        this.log(successMsg);
        return fields;
    }
    async executeFunctionsLogin() {
        await this.config.runCommand(LoginCommands[LoginTarget.FUNCTIONS]);
        return {};
    }
    async promptUserToChooseLoginTarget() {
        const choices = [];
        for (const [key, cmd] of Object.entries(LoginCommands)) {
            if (this.config.commandIDs.includes(cmd)) {
                choices.push(key);
            }
        }
        const responses = await (0, inquirer_1.prompt)([
            {
                name: 'target',
                message: 'What would you like to log into?',
                type: 'list',
                choices,
            },
        ]);
        return responses.target;
    }
    async promptUserForOrgSideEffects() {
        const responses = await (0, inquirer_1.prompt)([
            {
                name: 'alias',
                message: 'Set an alias for the org (leave blank for no alias)',
                type: 'input',
            },
            {
                name: 'configs',
                message: 'Set the org as your default org?',
                type: 'checkbox',
                choices: [core_1.OrgConfigProperties.TARGET_DEV_HUB, core_1.OrgConfigProperties.TARGET_ORG],
            },
        ]);
        return {
            alias: responses.alias,
            setDefault: responses.configs.includes(core_1.OrgConfigProperties.TARGET_ORG),
            setDefaultDevHub: responses.configs.includes(core_1.OrgConfigProperties.TARGET_DEV_HUB),
        };
    }
}
exports.default = Login;
Login.summary = messages.getMessage('summary');
Login.description = messages.getMessage('description');
Login.examples = messages.getMessages('examples');
Login.enableJsonFlag = false;
Login.flags = {};
//# sourceMappingURL=login.js.map