"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const open = require("open");
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const loginUtils_1 = require("../../loginUtils");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-login', 'login.org');
class LoginOrg extends sf_plugins_core_1.SfCommand {
    async run() {
        await this.setFlags();
        (0, loginUtils_1.validateInstanceUrl)(this.flags['instance-url']);
        const authInfo = await (0, loginUtils_1.executeOrgWebFlow)({ loginUrl: this.flags['instance-url'], browser: this.flags.browser });
        await (0, loginUtils_1.handleSideEffects)(authInfo, {
            alias: this.flags.alias,
            setDefault: this.flags['set-default'],
            setDefaultDevHub: this.flags['set-default-dev-hub'],
        });
        const fields = authInfo.getFields(true);
        const successMsg = `Successfully authorized ${fields.username} with ID ${fields.orgId}`;
        this.log(successMsg);
        return {
            alias: fields.alias,
            loginUrl: fields.loginUrl,
            orgId: fields.orgId,
            username: fields.username,
        };
    }
    async setFlags() {
        var _a, _b;
        const flags = (await this.parse(LoginOrg)).flags;
        if ((_a = flags.browser) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes('chrome')) {
            flags.browser = open.apps.chrome;
        }
        if ((_b = flags.browser) === null || _b === void 0 ? void 0 : _b.toLowerCase().includes('firefox')) {
            flags.browser = open.apps.firefox;
        }
        this.flags = flags;
    }
}
exports.default = LoginOrg;
LoginOrg.summary = messages.getMessage('summary');
LoginOrg.description = messages.getMessage('description');
LoginOrg.examples = messages.getMessages('examples');
LoginOrg.flags = {
    alias: core_1.Flags.string({
        description: messages.getMessage('flags.alias.summary'),
        char: 'a',
    }),
    browser: core_1.Flags.string({
        summary: messages.getMessage('flags.browser.summary'),
        description: messages.getMessage('flags.browser.description'),
        char: 'b',
    }),
    clientid: core_1.Flags.string({
        description: messages.getMessage('flags.clientid.summary'),
        char: 'i',
    }),
    'instance-url': core_1.Flags.string({
        summary: messages.getMessage('flags.instance-url.summary'),
        description: messages.getMessage('flags.instance-url.description'),
        default: 'https://login.salesforce.com',
        char: 'l',
    }),
    'set-default': core_1.Flags.boolean({
        char: 'd',
        description: messages.getMessage('flags.set-default.summary'),
    }),
    'set-default-dev-hub': core_1.Flags.boolean({
        char: 'v',
        description: messages.getMessage('flags.set-default-dev-hub.summary'),
    }),
};
LoginOrg.configurationVariablesSection = (0, sf_plugins_core_1.toHelpSection)('CONFIGURATION VARIABLES', core_2.SfdxPropertyKeys.API_VERSION, core_2.SfdxPropertyKeys.INSTANCE_URL);
LoginOrg.envVariablesSection = (0, sf_plugins_core_1.toHelpSection)('ENVIRONMENT VARIABLES', core_2.EnvironmentVariable.SFDX_INSTANCE_URL);
//# sourceMappingURL=org.js.map