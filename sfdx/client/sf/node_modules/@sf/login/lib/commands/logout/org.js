"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const inquirer_1 = require("inquirer");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-login', 'logout.org');
class LogoutOrg extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(LogoutOrg);
        this.remover = await core_2.AuthRemover.create();
        const stateAggregator = await core_2.StateAggregator.getInstance();
        const username = stateAggregator.aliases.resolveUsername(flags['target-org']);
        let success = true;
        if (flags['no-prompt']) {
            success = await this.remove(username);
        }
        else {
            if (await this.promptForConfirmation(username)) {
                success = await this.remove(username);
            }
            else {
                success = false;
                return { username };
            }
        }
        if (success) {
            this.log(messages.getMessage('success', [username]));
        }
        else {
            process.exitCode = 1;
            this.log(messages.getMessage('failure', [username]));
        }
        return { username };
    }
    async promptForConfirmation(username) {
        this.log(messages.getMessage('warning'));
        const { confirmed } = await (0, inquirer_1.prompt)([
            {
                name: 'confirmed',
                message: messages.getMessage('prompt.confirm', [username]),
                type: 'confirm',
            },
        ]);
        return confirmed;
    }
    async remove(username) {
        try {
            await this.remover.removeAuth(username);
            return true;
        }
        catch (e) {
            return false;
        }
    }
}
exports.default = LogoutOrg;
LogoutOrg.summary = messages.getMessage('summary');
LogoutOrg.description = messages.getMessage('description');
LogoutOrg.examples = messages.getMessages('examples');
LogoutOrg.flags = {
    'target-org': core_1.Flags.string({
        description: messages.getMessage('flags.target-org.summary'),
        char: 'o',
        required: true,
    }),
    'no-prompt': core_1.Flags.boolean({
        description: messages.getMessage('flags.no-prompt.summary'),
        default: false,
    }),
};
LogoutOrg.configurationVariablesSection = (0, sf_plugins_core_1.toHelpSection)('CONFIGURATION VARIABLES', core_2.SfdxPropertyKeys.API_VERSION, core_2.SfdxPropertyKeys.INSTANCE_URL, core_2.OrgConfigProperties.TARGET_ORG);
//# sourceMappingURL=org.js.map