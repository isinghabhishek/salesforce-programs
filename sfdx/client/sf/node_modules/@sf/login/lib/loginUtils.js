"use strict";
/*
 * Copyright (c) 2021, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateInstanceUrl = exports.handleSideEffects = exports.executeOrgWebFlow = void 0;
const open = require("open");
const core_1 = require("@salesforce/core");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-login', 'login.utils');
async function executeOrgWebFlow(args = {}) {
    try {
        const oauthConfig = args.loginUrl ? { loginUrl: args.loginUrl } : {};
        const oauthServer = await core_1.WebOAuthServer.create({ oauthConfig });
        await oauthServer.start();
        const openOpts = args.browser ? { wait: false, app: { name: args.browser } } : { wait: false };
        await open(oauthServer.getAuthorizationUrl(), openOpts);
        const authInfo = await oauthServer.authorizeAndSave();
        return authInfo;
    }
    catch (err) {
        const error = err;
        if (error.name === 'AuthCodeExchangeError') {
            const errMsg = `Invalid client credentials. Verify the OAuth client secret and ID. ${error.message}`;
            throw new core_1.SfdxError(errMsg, 'InvalidClientCredentials');
        }
        throw error;
    }
}
exports.executeOrgWebFlow = executeOrgWebFlow;
async function handleSideEffects(authInfo, sideEffects) {
    if (sideEffects.alias)
        await authInfo.setAlias(sideEffects.alias);
    if (sideEffects.setDefault)
        await authInfo.setAsDefault({ org: true });
    if (sideEffects.setDefaultDevHub)
        await authInfo.setAsDefault({ devHub: true });
    await authInfo.save();
}
exports.handleSideEffects = handleSideEffects;
function validateInstanceUrl(instanceUrl) {
    const sfdcUrl = new core_1.SfdcUrl(instanceUrl);
    if (sfdcUrl.isLightningDomain()) {
        throw messages.createError('errors.InstanceUrlIsInvalid', []);
    }
}
exports.validateInstanceUrl = validateInstanceUrl;
//# sourceMappingURL=loginUtils.js.map