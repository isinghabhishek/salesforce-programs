"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const os = require("os");
const core_1 = require("@oclif/core");
const core_2 = require("@salesforce/core");
const projectGenerator_1 = require("@salesforce/templates/lib/generators/projectGenerator");
const utils_1 = require("../../utils");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-generate', 'generate.project');
class GenerateProject extends utils_1.TemplateCommand {
    async run() {
        const { flags } = await this.parse(GenerateProject);
        const options = {
            defaultpackagedir: flags['default-package-dir'],
            loginurl: flags['login-url'],
            manifest: flags.manifest ?? false,
            ns: flags.namespace,
            outputdir: flags['output-dir'],
            projectname: flags.name,
            template: flags.template,
        };
        options.outputdir = await createOutputDir(flags['output-dir']);
        return this.runGenerator(projectGenerator_1.default, options);
    }
}
exports.default = GenerateProject;
GenerateProject.summary = messages.getMessage('summary');
GenerateProject.examples = messages.getMessages('examples');
GenerateProject.description = messages.getMessage('description');
GenerateProject.flags = {
    'default-package-dir': core_1.Flags.string({
        char: 'p',
        summary: messages.getMessage('flags.default-package-dir.summary'),
        description: messages.getMessage('flags.default-package-dir.description'),
        default: 'force-app',
    }),
    'login-url': core_1.Flags.string({
        char: 'l',
        summary: messages.getMessage('flags.login-url.summary'),
        description: messages.getMessage('flags.login-url.description'),
        default: 'https://login.salesforce.com',
        hidden: true,
    }),
    manifest: core_1.Flags.boolean({
        char: 'x',
        summary: messages.getMessage('flags.manifest.summary'),
        description: messages.getMessage('flags.manifest.description'),
    }),
    name: core_1.Flags.string({
        char: 'n',
        summary: messages.getMessage('flags.name.summary'),
        description: messages.getMessage('flags.name.description'),
        required: true,
    }),
    namespace: core_1.Flags.string({
        char: 's',
        summary: messages.getMessage('flags.namespace.summary'),
        description: messages.getMessage('flags.namespace.description'),
        default: '',
    }),
    'output-dir': core_1.Flags.directory({
        char: 'd',
        summary: messages.getMessage('flags.output-dir.summary'),
        description: messages.getMessage('flags.output-dir.description'),
        default: '.',
    }),
    template: core_1.Flags.string({
        char: 't',
        summary: messages.getMessage('flags.template.summary'),
        description: messages.getMessage('flags.template.description'),
        default: 'standard',
        options: ['standard', 'empty', 'analytics'],
    }),
};
const createOutputDir = async (outputDir) => {
    let dir = outputDir;
    if (dir === '.') {
        return dir;
    }
    if (path.isAbsolute(dir)) {
        return dir;
    }
    if (dir.startsWith('~')) {
        dir = path.join(os.homedir(), dir.slice(1));
    }
    const resolvedPath = path.resolve(dir);
    await fs.promises.mkdir(resolvedPath, { recursive: true });
    return resolvedPath;
};
//# sourceMappingURL=project.js.map