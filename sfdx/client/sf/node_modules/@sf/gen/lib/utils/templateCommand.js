"use strict";
/*
 * Copyright (c) 2019, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateCommand = void 0;
const path = require("path");
const yeoman = require("yeoman-environment");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const utils_1 = require("@salesforce/templates/lib/utils");
const constants_1 = require("../constants");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-generate', 'templateCommand');
class TemplateCommand extends sf_plugins_core_1.SfCommand {
    static buildJson(adapter, targetDir) {
        const cleanOutput = adapter.log.getCleanOutput();
        const rawOutput = `target dir = ${targetDir}\n${adapter.log.getOutput()}`;
        const output = {
            outputDir: targetDir,
            created: cleanOutput,
            rawOutput,
        };
        return output;
    }
    static async getApiVersion() {
        try {
            const aggregator = await core_1.ConfigAggregator.create();
            const apiVersionFromConfig = aggregator.getPropertyValue(core_1.OrgConfigProperties.ORG_API_VERSION);
            return apiVersionFromConfig || constants_1.defaultApiVersion;
        }
        catch (err) {
            return constants_1.defaultApiVersion;
        }
    }
    async runGenerator(generator, options) {
        if (!options.apiversion) {
            options.apiversion = await TemplateCommand.getApiVersion();
        }
        const adapter = new utils_1.ForceGeneratorAdapter();
        const env = yeoman.createEnv(undefined, undefined, adapter);
        env.registerStub(generator, 'generator');
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        await env.run('generator', options); // eslint-disable-line @typescript-eslint/await-thenable
        const targetDir = path.resolve(options.outputdir);
        if (!options.json) {
            this.log(messages.getMessage('TargetDirOutput', [targetDir]));
            this.log(adapter.log.getOutput());
        }
        return TemplateCommand.buildJson(adapter, targetDir);
    }
}
exports.TemplateCommand = TemplateCommand;
//# sourceMappingURL=templateCommand.js.map