"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.herokuClientApiUrl = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const url_1 = require("url");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const Transport = require("jsforce/lib/transport");
class APIClient {
    constructor(options) {
        this.auth = options.auth;
        this.apiUrl = options.apiUrl;
    }
    async request(url, options) {
        options.headers = options.headers || {};
        if (!Object.keys(options.headers).find((header) => header.toLowerCase() === 'authorization')) {
            options.headers.authorization = `Bearer ${this.auth}`;
        }
        const baseURL = `${this.apiUrl.origin}`;
        const envHeaders = JSON.parse(process.env.SALESFORCE_FUNCTIONS_HEADERS || '{}');
        options.headers = Object.assign(Object.assign({ Accept: 'application/vnd.heroku+json; version=3', 'Content-Type': 'application/json' }, envHeaders), options.headers);
        const req = Object.assign(Object.assign({ url: `${baseURL}${url}` }, options), { body: JSON.stringify(options.data) });
        const response = await new Transport().httpRequest(req);
        try {
            response.data = JSON.parse(response.body);
        }
        catch (err) {
            // not json
        }
        if (response.statusCode >= 400) {
            const error = new Error(`Request failed with status code ${response.statusCode}`);
            error.data = response.data;
            throw error;
        }
        return response;
    }
    get(url, options = {}) {
        return this.request(url, Object.assign(Object.assign({}, options), { method: 'GET' }));
    }
    post(url, options = {}) {
        return this.request(url, Object.assign(Object.assign({}, options), { method: 'POST' }));
    }
    put(url, options = {}) {
        return this.request(url, Object.assign(Object.assign({}, options), { method: 'PUT' }));
    }
    patch(url, options = {}) {
        return this.request(url, Object.assign(Object.assign({}, options), { method: 'PATCH' }));
    }
    delete(url, options = {}) {
        return this.request(url, Object.assign(Object.assign({}, options), { method: 'DELETE' }));
    }
}
exports.default = APIClient;
function herokuClientApiUrl() {
    const defaultUrl = 'https://api.heroku.com';
    const envVarURL = process.env.SALESFORCE_FUNCTIONS_API;
    const apiURL = new url_1.URL(envVarURL || defaultUrl);
    return apiURL;
}
exports.herokuClientApiUrl = herokuClientApiUrl;
