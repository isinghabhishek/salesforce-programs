"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveFunctionsPaths = exports.resolveFunctionsDirectory = exports.resolveSfdxProjectPath = exports.reverseWalk = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const fs_extra_1 = require("fs-extra");
const PROJECT_JSON = 'sfdx-project.json';
const FUNCTIONS_DIR = 'functions';
async function reverseWalk(fileName, iterations = 10) {
    if (iterations === 0) {
        return null;
    }
    if (await (0, fs_extra_1.pathExists)(fileName)) {
        return fileName;
    }
    return reverseWalk(path.join('..', fileName), iterations - 1);
}
exports.reverseWalk = reverseWalk;
async function resolveSfdxProjectPath(projectJson = PROJECT_JSON) {
    const projectPath = await reverseWalk(projectJson);
    if (!projectPath) {
        throw new Error('No sfdx project found.');
    }
    return projectPath;
}
exports.resolveSfdxProjectPath = resolveSfdxProjectPath;
async function resolveFunctionsDirectory() {
    const sfdxProjectPath = await resolveSfdxProjectPath();
    const fnPath = sfdxProjectPath.replace(PROJECT_JSON, FUNCTIONS_DIR);
    if (await (0, fs_extra_1.pathExists)(fnPath)) {
        return fnPath;
    }
    throw new Error('No functions directory found.');
}
exports.resolveFunctionsDirectory = resolveFunctionsDirectory;
async function resolveFunctionsPaths() {
    const fnDir = await resolveFunctionsDirectory();
    // This is the list of actual functions inside the `functions` directory
    const fnDirs = await (0, fs_extra_1.readdir)(fnDir);
    if (!fnDirs.length) {
        throw new Error('The functions directory does contain any functions.');
    }
    return fnDirs.reduce((acc, fn) => {
        const fnPath = path.join(fnDir, fn);
        if ((0, fs_extra_1.lstatSync)(fnPath).isDirectory()) {
            acc.push(fnPath);
        }
        return acc;
    }, []);
}
exports.resolveFunctionsPaths = resolveFunctionsPaths;
