"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FunctionsTableFlags = exports.waitFlag = exports.confirmationFlag = exports.environmentType = exports.FunctionsFlagBuilder = void 0;
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const cli_ux_1 = require("cli-ux");
const core_2 = require("@salesforce/core");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-functions', 'lib.flags');
exports.FunctionsFlagBuilder = {
    environment: core_1.Flags.build({
        char: 'e',
        description: messages.getMessage('flags.target-compute.summary'),
        required: false,
    }),
    connectedOrg: core_1.Flags.build({
        char: 'o',
        description: messages.getMessage('flags.connectedOrg.summary'),
        required: false,
    }),
    keyValueFlag: core_1.Flags.build({
        description: messages.getMessage('flags.keyValueFlag.summary'),
        async parse(input) {
            const [key, ...rest] = input.split('=');
            const value = rest.join('=');
            if (!value) {
                throw new core_1.Errors.CLIError(`--${this.name}=${input} must be a valid key-value pair (i.e. mykey=somevalue)`);
            }
            return { key, value };
        },
    }),
};
exports.environmentType = core_1.Flags.string({
    char: 't',
    description: messages.getMessage('flags.environmentType.summary'),
    options: ['org', 'scratchorg', 'compute'],
    multiple: true,
});
exports.confirmationFlag = core_1.Flags.string({
    description: messages.getMessage('flags.confirmationFlag.summary'),
    helpValue: 'name',
    multiple: true,
});
exports.waitFlag = core_1.Flags.boolean({
    char: 'w',
    required: false,
    description: messages.getMessage('flags.waitFlag.summary'),
});
exports.FunctionsTableFlags = Object.assign(Object.assign({}, cli_ux_1.cli.table.flags({ except: ['csv', 'output'] })), { output: core_1.Flags.string({
        exclusive: ['no-truncate', 'csv'],
        description: messages.getMessage('flags.FunctionsTableFlags.summary'),
        options: ['json', 'csv'],
    }) });
