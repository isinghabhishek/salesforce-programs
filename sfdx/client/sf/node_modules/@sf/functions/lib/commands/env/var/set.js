"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const color_1 = require("@heroku-cli/color");
const core_1 = require("@oclif/core");
const cli_ux_1 = require("cli-ux");
const core_2 = require("@salesforce/core");
const flags_1 = require("../../../lib/flags");
const base_1 = require("../../../lib/base");
const utils_1 = require("../../../lib/utils");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-functions', 'env.var.set');
class ConfigSet extends base_1.default {
    parseKeyValuePairs(pairs) {
        if (pairs.length === 0) {
            this.error('Usage: sfdx env:var:set KEY1=VALUE1 [KEY2=VALUE2 ...]\nMust specify KEY and VALUE to set.');
        }
        return pairs.reduce((acc, elem) => {
            if (elem.indexOf('=') === -1) {
                this.error(`${color_1.default.cyan(elem)} is invalid. Please use the format ${color_1.default.cyan('key=value')}`);
            }
            const equalsIndex = elem.indexOf('=');
            const key = elem.slice(0, equalsIndex);
            const value = elem.slice(equalsIndex + 1);
            return Object.assign(Object.assign({}, acc), { [key]: value });
        }, {});
    }
    async run() {
        var _a, _b, _c;
        const { flags, argv } = await this.parse(ConfigSet);
        this.postParseHook(flags);
        // We support both versions of the flag here for the sake of backward compat
        const targetCompute = (_a = flags['target-compute']) !== null && _a !== void 0 ? _a : flags.environment;
        if (!targetCompute) {
            throw new core_1.Errors.CLIError(`Missing required flag:
        -e, --target-compute TARGET-COMPUTE  ${color_1.default.dim('Environment name.')}
       See more help with --help`);
        }
        if (flags.environment) {
            this.warn(messages.getMessage('flags.environment.deprecation'));
        }
        const appName = await (0, utils_1.resolveAppNameForEnvironment)(targetCompute);
        const configPairs = this.parseKeyValuePairs(argv);
        cli_ux_1.cli.action.start(`Setting ${Object.keys(configPairs)
            .map((key) => color_1.default.configVar(key))
            .join(', ')} and restarting ${color_1.default.app(targetCompute)}`);
        try {
            await this.client.patch(`/apps/${appName}/config-vars`, {
                data: configPairs,
            });
            cli_ux_1.cli.action.stop();
            return 'Set env var';
        }
        catch (error) {
            cli_ux_1.cli.action.stop('failed');
            if ((_c = (_b = error.data) === null || _b === void 0 ? void 0 : _b.message) === null || _c === void 0 ? void 0 : _c.includes("Couldn't find that app")) {
                this.error(new Error(`Could not find environment ${appName}`));
            }
            this.error(error);
        }
    }
}
exports.default = ConfigSet;
ConfigSet.strict = false;
ConfigSet.summary = messages.getMessage('summary');
ConfigSet.examples = messages.getMessages('examples');
ConfigSet.flags = {
    'target-compute': flags_1.FunctionsFlagBuilder.environment({
        exclusive: ['environment'],
    }),
    environment: flags_1.FunctionsFlagBuilder.environment({
        char: 'e',
        exclusive: ['target-compute'],
        hidden: true,
    }),
};
