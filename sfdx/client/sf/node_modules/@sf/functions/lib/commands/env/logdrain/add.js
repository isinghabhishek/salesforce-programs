"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const color_1 = require("@heroku-cli/color");
const core_1 = require("@oclif/core");
const cli_ux_1 = require("cli-ux");
const core_2 = require("@salesforce/core");
const flags_1 = require("../../../lib/flags");
const base_1 = require("../../../lib/base");
const utils_1 = require("../../../lib/utils");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-functions', 'env.logdrain.add');
class LogDrainAdd extends base_1.default {
    async run() {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
        const { flags } = await this.parse(LogDrainAdd);
        this.postParseHook(flags);
        // We support both versions of the flag here for the sake of backward compat
        const targetCompute = (_a = flags['target-compute']) !== null && _a !== void 0 ? _a : flags.environment;
        const url = (_b = flags['drain-url']) !== null && _b !== void 0 ? _b : flags.url;
        if (!targetCompute) {
            throw new core_1.Errors.CLIError(`Missing required flag:
        -e, --target-compute TARGET-COMPUTE  ${color_1.default.dim('Environment name.')}
       See more help with --help`);
        }
        if (!url) {
            throw new core_1.Errors.CLIError(`Missing required flag:
       -u, --drain-url DRAIN-URL  ${color_1.default.dim('Endpoint that will receive sent logs.')}
       See more help with --help`);
        }
        if (flags.environment) {
            this.warn(messages.getMessage('flags.environment.deprecation'));
        }
        if (flags.url) {
            this.warn(messages.getMessage('flags.url.deprecation'));
        }
        const appName = await (0, utils_1.resolveAppNameForEnvironment)(targetCompute);
        try {
            cli_ux_1.cli.action.start(`Creating drain for environment ${color_1.default.app(targetCompute)}`);
            const result = await this.client.post(`/apps/${appName}/log-drains`, {
                data: {
                    url,
                },
            });
            cli_ux_1.cli.action.stop();
            return [
                {
                    addon: null,
                    created_at: result.data.created_at,
                    id: result.data.id,
                    token: result.data.token,
                    updated_at: result.data.updated_at,
                    url: result.data.url,
                },
            ];
        }
        catch (e) {
            const error = e;
            if ((_d = (_c = error.data) === null || _c === void 0 ? void 0 : _c.message) === null || _d === void 0 ? void 0 : _d.includes('Url is invalid')) {
                this.error(new Error(`URL is invalid ${url}`));
            }
            if ((_f = (_e = error.data) === null || _e === void 0 ? void 0 : _e.message) === null || _f === void 0 ? void 0 : _f.includes('Url has already been taken')) {
                this.error(new Error(`Logdrain URL is already added ${url}`));
            }
            if ((_h = (_g = error.data) === null || _g === void 0 ? void 0 : _g.message) === null || _h === void 0 ? void 0 : _h.includes("Couldn't find that app")) {
                this.error(new Error(`Could not find environment ${appName}`));
            }
            if ((_k = (_j = error.data) === null || _j === void 0 ? void 0 : _j.message) === null || _k === void 0 ? void 0 : _k.includes("You've reached the limit")) {
                this.error(new Error(`You've reached the limit of 5 log drains on ${appName}`));
            }
            if ((_m = (_l = error.data) === null || _l === void 0 ? void 0 : _l.message) === null || _m === void 0 ? void 0 : _m.includes('401')) {
                this.error(new Error('Your token has expired, please login with sf login functions'));
            }
            this.error(e);
        }
    }
}
exports.default = LogDrainAdd;
LogDrainAdd.summary = messages.getMessage('summary');
LogDrainAdd.description = messages.getMessage('description');
LogDrainAdd.examples = messages.getMessages('examples');
LogDrainAdd.flags = {
    'target-compute': flags_1.FunctionsFlagBuilder.environment({
        exclusive: ['environment'],
    }),
    environment: flags_1.FunctionsFlagBuilder.environment({
        char: 'e',
        exclusive: ['target-compute'],
        hidden: true,
    }),
    'drain-url': core_1.Flags.string({
        exclusive: ['url'],
        char: 'l',
        description: messages.getMessage('flags.drain-url.summary'),
    }),
    url: core_1.Flags.string({
        exclusive: ['drain-url'],
        char: 'u',
        description: messages.getMessage('flags.drain-url.summary'),
        hidden: true,
    }),
};
