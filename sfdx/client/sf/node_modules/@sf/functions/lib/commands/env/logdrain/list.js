"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const color_1 = require("@heroku-cli/color");
const cli_ux_1 = require("cli-ux");
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const flags_1 = require("../../../lib/flags");
const base_1 = require("../../../lib/base");
const utils_1 = require("../../../lib/utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'env.logdrain.list');
class LogDrainList extends base_1.default {
    async run() {
        var _a;
        const { flags } = await this.parse(LogDrainList);
        this.postParseHook(flags);
        // We support both versions of the flag here for the sake of backward compat
        const targetCompute = (_a = flags['target-compute']) !== null && _a !== void 0 ? _a : flags.environment;
        if (!targetCompute) {
            throw new core_2.Errors.CLIError(`Missing required flag:
        -e, --target-compute TARGET-COMPUTE  ${color_1.default.dim('Environment name.')}
       See more help with --help`);
        }
        if (flags.environment) {
            this.warn(messages.getMessage('flags.environment.deprecation'));
        }
        const appName = await (0, utils_1.resolveAppNameForEnvironment)(targetCompute);
        const { data: drains } = await this.client.get(`/apps/${appName}/log-drains`);
        if (drains.length === 0) {
            this.warn(`No log-drains found for environment ${targetCompute}`);
        }
        else {
            cli_ux_1.cli.table(drains, {
                id: {
                    header: 'ID',
                    get: (row) => row.id,
                },
                url: {
                    header: 'URL',
                    get: (row) => row.url,
                },
            }, Object.assign({ printLine: this.log.bind(this) }, flags));
        }
        return drains;
    }
}
exports.default = LogDrainList;
LogDrainList.summary = messages.getMessage('summary');
LogDrainList.examples = messages.getMessages('examples');
LogDrainList.flags = {
    'target-compute': flags_1.FunctionsFlagBuilder.environment({
        exclusive: ['environment'],
    }),
    environment: flags_1.FunctionsFlagBuilder.environment({
        char: 'e',
        exclusive: ['target-compute'],
        hidden: true,
    }),
};
