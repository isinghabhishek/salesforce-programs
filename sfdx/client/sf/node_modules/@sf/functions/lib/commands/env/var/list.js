"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const color_1 = require("@heroku-cli/color");
const cli_ux_1 = require("cli-ux");
const lodash_1 = require("lodash");
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const flags_1 = require("../../../lib/flags");
const base_1 = require("../../../lib/base");
const utils_1 = require("../../../lib/utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'env.var.list');
class ConfigList extends base_1.default {
    async run() {
        var _a;
        const { flags } = await this.parse(ConfigList);
        this.postParseHook(flags);
        // We support both versions of the flag here for the sake of backward compat
        const targetCompute = (_a = flags['target-compute']) !== null && _a !== void 0 ? _a : flags.environment;
        if (!targetCompute) {
            throw new core_2.Errors.CLIError(`Missing required flag:
        -e, --target-compute TARGET-COMPUTE  ${color_1.default.dim('Environment name.')}
       See more help with --help`);
        }
        if (flags.environment) {
            this.warn(messages.getMessage('flags.environment.deprecation'));
        }
        const appName = await (0, utils_1.resolveAppNameForEnvironment)(targetCompute);
        const { data: config } = await this.client.get(`/apps/${appName}/config-vars`);
        const configArray = (0, lodash_1.flatMap)(config, (value, key) => {
            return {
                key,
                value,
            };
        });
        if (configArray.length === 0) {
            this.warn(`No config vars found for environment ${targetCompute}`);
        }
        else {
            cli_ux_1.cli.table(configArray, {
                key: {
                    header: 'Key',
                    get: (configVar) => configVar.key,
                },
                value: {
                    header: 'Value',
                    get: (configVar) => configVar.value,
                },
            }, Object.assign({ printLine: this.log.bind(this) }, flags));
        }
        return config;
    }
}
exports.default = ConfigList;
ConfigList.summary = messages.getMessage('summary');
ConfigList.description = messages.getMessage('description');
ConfigList.examples = messages.getMessages('examples');
ConfigList.flags = {
    'target-compute': flags_1.FunctionsFlagBuilder.environment({
        exclusive: ['environment'],
    }),
    environment: flags_1.FunctionsFlagBuilder.environment({
        char: 'e',
        exclusive: ['target-compute'],
        hidden: true,
    }),
};
