"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const color_1 = require("@heroku-cli/color");
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const functions_core_1 = require("@hk/functions-core");
const cli_ux_1 = require("cli-ux");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'run.function.start.container');
class Container extends core_2.Command {
    async run() {
        var _a;
        const { flags } = await this.parse(Container);
        const buildOpts = {
            builder: flags.builder,
            'clear-cache': flags['clear-cache'],
            'no-pull': flags['no-pull'],
            network: flags.network,
            env: flags.env,
            descriptor: (_a = flags.descriptor) !== null && _a !== void 0 ? _a : path.resolve(flags.path, 'project.toml'),
            path: flags.path,
        };
        const runOpts = {
            port: flags.port,
            'debug-port': flags['debug-port'],
            env: flags.env,
        };
        const descriptor = await (0, functions_core_1.getProjectDescriptor)(buildOpts.descriptor);
        const functionName = descriptor.com.salesforce.id;
        const benny = await (0, functions_core_1.getFunctionsBinary)();
        const writeMsg = (msg) => {
            const outputMsg = msg.text;
            if (outputMsg) {
                cli_ux_1.cli.info(outputMsg);
            }
        };
        benny.on('pack', writeMsg);
        benny.on('container', writeMsg);
        benny.on('error', (msg) => {
            cli_ux_1.cli.error(msg.text, { exit: false });
        });
        benny.on('log', (msg) => {
            if (msg.level === 'debug' && !flags.verbose)
                return;
            if (msg.level === 'error') {
                this.exit();
            }
            if (msg.text) {
                cli_ux_1.cli.info(msg.text);
            }
            // evergreen:benny:message {"type":"log","timestamp":"2021-05-10T10:00:27.953248-05:00","level":"info","fields":{"debugPort":"9229","localImageName":"jvm-fn-init","network":"","port":"8080"}} +21ms
            if (msg.fields && msg.fields.localImageName) {
                this.log(`${color_1.default.magenta('Running on port')} :${color_1.default.cyan(msg.fields.port)}`);
                this.log(`${color_1.default.magenta('Debugger running on port')} :${color_1.default.cyan(msg.fields.debugPort)}`);
            }
        });
        if (!flags['no-build']) {
            this.log(`${color_1.default.magenta('Building')} ${color_1.default.cyan(functionName)}`);
            await benny.build(functionName, buildOpts);
        }
        if (!flags['no-run']) {
            this.log(`${color_1.default.magenta('Starting')} ${color_1.default.cyan(functionName)}`);
            await benny.run(functionName, runOpts);
        }
    }
}
exports.default = Container;
Container.summary = messages.getMessage('summary');
Container.description = messages.getMessage('description');
Container.examples = messages.getMessages('examples');
Container.flags = {
    builder: core_2.Flags.string({
        description: messages.getMessage('flags.builder.summary'),
        hidden: true,
    }),
    path: core_2.Flags.string({
        description: messages.getMessage('flags.path.summary'),
        default: path.resolve('.'),
        hidden: true,
    }),
    port: core_2.Flags.integer({
        char: 'p',
        description: messages.getMessage('flags.port.summary'),
        default: 8080,
    }),
    'debug-port': core_2.Flags.integer({
        char: 'b',
        description: messages.getMessage('flags.debug-port.summary'),
        default: 9229,
    }),
    'clear-cache': core_2.Flags.boolean({
        description: messages.getMessage('flags.clear-cache.summary'),
    }),
    'no-pull': core_2.Flags.boolean({
        description: messages.getMessage('flags.no-pull.summary'),
    }),
    'no-build': core_2.Flags.boolean({
        description: messages.getMessage('flags.no-build.summary'),
        hidden: true,
    }),
    'no-run': core_2.Flags.boolean({
        description: messages.getMessage('flags.no-run.summary'),
        hidden: true,
    }),
    env: core_2.Flags.string({
        char: 'e',
        description: messages.getMessage('flags.env.summary'),
        multiple: true,
    }),
    network: core_2.Flags.string({
        description: messages.getMessage('flags.network.summary'),
    }),
    verbose: core_2.Flags.boolean({
        char: 'v',
        description: messages.getMessage('flags.verbose.summary'),
    }),
    descriptor: core_2.Flags.string({
        description: messages.getMessage('flags.descriptor.summary'),
        hidden: true,
    }),
};
