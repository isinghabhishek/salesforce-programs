"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const cli_ux_1 = require("cli-ux");
const core_1 = require("@salesforce/core");
// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore
const Transport = require("jsforce/lib/transport");
const base_1 = require("../../lib/base");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'login.functions');
class Login extends base_1.default {
    async run() {
        const identityUrl = process.env.SALESFORCE_FUNCTIONS_IDENTITY_URL || 'https://cli-auth.heroku.com';
        const rawResponse = await new Transport().httpRequest({
            method: 'POST',
            url: `${identityUrl}/sfdx/auth`,
            body: JSON.stringify({
                description: 'Login from Sfdx CLI',
            }),
        });
        const { browser_url, cli_url, token } = JSON.parse(rawResponse.body);
        const browserUrl = identityUrl + browser_url;
        const cliUrl = identityUrl + cli_url;
        this.log(`Opening browser to ${browserUrl}\n`);
        await cli_ux_1.cli.open(browserUrl);
        cli_ux_1.cli.action.start('Waiting for login');
        const headers = { Authorization: 'Bearer ' + token };
        const response = await new Transport().httpRequest({
            url: cliUrl,
            method: 'GET',
            headers,
        });
        const data = JSON.parse(response.body);
        if (data.error) {
            return this.error(`${data.error}`);
        }
        cli_ux_1.cli.action.stop();
        cli_ux_1.cli.action.start('Saving credentials');
        const bearerToken = data.access_token;
        const refreshToken = data.refresh_token;
        this.stateAggregator.tokens.set(base_1.default.TOKEN_BEARER_KEY, { token: bearerToken, url: this.identityUrl.toString() });
        await this.stateAggregator.tokens.write();
        const account = await this.fetchAccount();
        this.stateAggregator.tokens.update(base_1.default.TOKEN_BEARER_KEY, { user: account.salesforce_username });
        if (refreshToken) {
            this.stateAggregator.tokens.set(base_1.default.TOKEN_REFRESH_KEY, {
                token: refreshToken,
                url: this.identityUrl.toString(),
                user: account.salesforce_username,
            });
        }
        await this.stateAggregator.tokens.write();
        cli_ux_1.cli.action.stop();
    }
}
exports.default = Login;
Login.summary = messages.getMessage('summary');
Login.description = messages.getMessage('description');
Login.examples = messages.getMessages('examples');
