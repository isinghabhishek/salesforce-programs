"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const core_1 = require("@oclif/core");
const chalk_1 = require("chalk");
const core_2 = require("@salesforce/core");
const base_1 = require("../../lib/base");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-functions', 'whoami.functions');
const FIELDS = ['id', 'email', 'token'];
class WhoAmI extends base_1.default {
    async run() {
        const { flags } = await this.parse(WhoAmI);
        this.postParseHook(flags);
        const ret = {};
        const account = await this.fetchAccount();
        const fields = Object.entries(account).filter(([key]) => FIELDS.includes(key));
        if (flags.json) {
            fields.forEach(([key, val]) => {
                ret[key] = val;
            });
            if (flags['show-token']) {
                return {
                    functionsEmail: ret['email'],
                    functionsId: ret['id'],
                    functionsToken: this.auth,
                };
            }
            else {
                return {
                    functionsEmail: ret['email'],
                    functionsId: ret['id'],
                };
            }
        }
        else {
            this.log(`Hello ${account.name} ðŸ‘‹ \n`);
            if (flags['show-token']) {
                this.log(`Your functions token is: ${(0, chalk_1.cyan)(this.auth)}\n`);
                ret.token = this.auth;
            }
            this.log('Here is some information on your functions account:');
            const pad = fields.reduce((max, [key]) => (key.length > max ? key.length : max), 0) + 2;
            fields.forEach(([key, val]) => {
                ret[key] = val;
                this.log((0, chalk_1.dim)(`  ${(key + ' :').padStart(pad)} ${val}`));
            });
        }
        return ret;
    }
}
exports.default = WhoAmI;
WhoAmI.summary = messages.getMessage('summary');
WhoAmI.description = messages.getMessage('description');
WhoAmI.examples = messages.getMessages('examples');
WhoAmI.flags = {
    'show-token': core_1.Flags.boolean({
        description: messages.getMessage('flags.show-token.summary'),
        hidden: true,
    }),
};
