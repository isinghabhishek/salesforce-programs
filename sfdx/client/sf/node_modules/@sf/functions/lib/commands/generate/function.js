"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const color_1 = require("@heroku-cli/color");
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const functions_core_1 = require("@hk/functions-core");
const base_1 = require("../../lib/base");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'generate.function');
/**
 * Based on given language, create function project with specific scaffolding.
 */
class GenerateFunction extends base_1.default {
    async run() {
        var _a;
        const { flags } = await this.parse(GenerateFunction);
        const fnName = (_a = flags['function-name']) !== null && _a !== void 0 ? _a : flags.name;
        if (!fnName) {
            throw new core_2.Errors.CLIError(`Missing required flag:
       -n, --function-name FUNCTION-NAME  ${color_1.default.dim('Function name.')}
       See more help with --help`);
        }
        if (flags.name) {
            this.warn(messages.getMessage('flags.name.deprecation'));
        }
        const { name, path, language, welcomeText } = await (0, functions_core_1.generateFunction)(fnName, flags.language);
        this.log(`Created ${language} function ${color_1.default.green(name)} in ${color_1.default.green(path)}.`);
        if (welcomeText) {
            this.log('');
            this.log(welcomeText);
        }
    }
}
exports.default = GenerateFunction;
GenerateFunction.enableJsonFlag = false;
GenerateFunction.summary = messages.getMessage('summary');
GenerateFunction.description = messages.getMessage('description');
GenerateFunction.examples = messages.getMessages('examples');
GenerateFunction.flags = {
    'function-name': core_2.Flags.string({
        exclusive: ['name'],
        description: messages.getMessage('flags.function-name.summary'),
        char: 'n',
    }),
    name: core_2.Flags.string({
        exclusive: ['function-name'],
        description: messages.getMessage('flags.function-name.summary'),
        char: 'n',
        hidden: true,
    }),
    language: core_2.Flags.enum({
        options: ['javascript', 'typescript', 'java'],
        description: messages.getMessage('flags.language.summary'),
        char: 'l',
        required: true,
    }),
};
