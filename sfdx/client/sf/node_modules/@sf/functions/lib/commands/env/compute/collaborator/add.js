"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const color_1 = require("@heroku-cli/color");
const core_1 = require("@oclif/core");
const cli_ux_1 = require("cli-ux");
const core_2 = require("@salesforce/core");
const flags_1 = require("../../../../lib/flags");
const base_1 = require("../../../../lib/base");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-functions', 'env.compute.collaborator.add');
class ComputeCollaboratorAdd extends base_1.default {
    async run() {
        var _a, _b;
        const { flags } = await this.parse(ComputeCollaboratorAdd);
        const herokuUser = flags['heroku-user'];
        if (!herokuUser) {
            throw new core_1.Errors.CLIError(`Missing required flag:
        -h, --heroku-user example@heroku.com  ${color_1.default.dim('Heroku user email address.')}
       See more help with --help`);
        }
        cli_ux_1.cli.action.start(`Adding Heroku user ${color_1.default.heroku(herokuUser)} as a collaborator on this Functions account`);
        try {
            await this.client.post('/salesforce-orgs/collaborators', {
                headers: {
                    Accept: 'application/vnd.heroku+json; version=3.evergreen',
                    Authorization: `Bearer ${this.auth}`,
                },
                data: {
                    user: herokuUser,
                },
            });
        }
        catch (e) {
            const error = e;
            if ((_a = error.message) === null || _a === void 0 ? void 0 : _a.includes('409')) {
                this.error(`${color_1.default.heroku(herokuUser)} is already a collaborator to this Functions account.`);
            }
            if ((_b = error.message) === null || _b === void 0 ? void 0 : _b.includes('404')) {
                this.error(`${color_1.default.heroku(herokuUser)} does not exist.`);
            }
            this.error(error.message);
        }
        cli_ux_1.cli.action.stop();
        this.log('For more information about attaching Heroku add-ons to your compute environments, run $ heroku addons:attach --help.');
    }
}
exports.default = ComputeCollaboratorAdd;
ComputeCollaboratorAdd.enableJsonFlag = false;
ComputeCollaboratorAdd.summary = messages.getMessage('summary');
ComputeCollaboratorAdd.examples = messages.getMessages('examples');
ComputeCollaboratorAdd.flags = {
    'heroku-user': flags_1.FunctionsFlagBuilder.environment({
        char: 'h',
        description: messages.getMessage('flags.heroku-user.summary'),
        required: true,
    }),
};
