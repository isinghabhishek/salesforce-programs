"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const local_1 = require("./start/local");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'run.function.start');
// run:function:start is an alias command to run:function:start:local.
// run:function:start previously ran via container mode, so it still accepts
// arguments applicable to the container subcommand, but ignores them and flags
// them as deprecated. The additional flags may be removed after 04/30/2022.
class Start extends local_1.default {
    async run() {
        const { flags } = await this.parse(Start);
        Object.entries(flags).forEach(([flag, val]) => {
            let msg = null;
            try {
                msg = messages.getMessage(`flags.${flag}.deprecation`);
                if (val) {
                    this.warn(msg);
                }
            }
            catch (_a) {
                // No deprecation message, flag is not deprecated
            }
        });
        await this.runWithFlags(flags);
    }
}
exports.default = Start;
Start.summary = messages.getMessage('summary');
Start.description = messages.getMessage('description');
Start.flags = {
    builder: core_2.Flags.string({
        hidden: true,
    }),
    'clear-cache': core_2.Flags.boolean({
        hidden: true,
    }),
    'debug-port': core_2.Flags.integer({
        char: 'b',
        description: messages.getMessage('flags.debug-port.summary'),
        default: 9229,
    }),
    descriptor: core_2.Flags.string({
        hidden: true,
    }),
    env: core_2.Flags.string({
        char: 'e',
        multiple: true,
        hidden: true,
    }),
    language: core_2.Flags.enum({
        description: messages.getMessage('flags.language.summary'),
        options: ['javascript', 'typescript', 'java', 'auto'],
        char: 'l',
        default: 'auto',
    }),
    network: core_2.Flags.string({
        hidden: true,
    }),
    'no-build': core_2.Flags.boolean({
        hidden: true,
    }),
    'no-pull': core_2.Flags.boolean({
        hidden: true,
    }),
    'no-run': core_2.Flags.boolean({
        hidden: true,
    }),
    path: core_2.Flags.string({
        description: messages.getMessage('flags.path.summary'),
        default: path.resolve('.'),
        hidden: true,
    }),
    port: core_2.Flags.integer({
        char: 'p',
        description: messages.getMessage('flags.port.summary'),
        default: 8080,
    }),
    verbose: core_2.Flags.boolean({
        char: 'v',
        description: messages.getMessage('flags.verbose.summary'),
    }),
};
