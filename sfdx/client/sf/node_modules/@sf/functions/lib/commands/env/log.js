"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const color_1 = require("@heroku-cli/color");
const cli_ux_1 = require("cli-ux");
const core_1 = require("@salesforce/core");
const core_2 = require("@oclif/core");
const flags_1 = require("../../lib/flags");
const base_1 = require("../../lib/base");
const utils_1 = require("../../lib/utils");
const logStreamUtils = require("../../lib/log-stream-utils");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-functions', 'env.log');
class Log extends base_1.default {
    async run() {
        var _a, _b;
        const { flags } = await this.parse(Log);
        // We support both versions of the flag here for the sake of backward compat
        const targetCompute = (_a = flags['target-compute']) !== null && _a !== void 0 ? _a : flags.environment;
        const logLines = (_b = flags.num) !== null && _b !== void 0 ? _b : 100;
        if (!targetCompute) {
            throw new core_2.Errors.CLIError(`Missing required flag:
        -c, --target-compute TARGET-COMPUTE  ${color_1.default.dim('Environment name.')}
       See more help with --help`);
        }
        if (flags.environment) {
            this.warn(messages.getMessage('flags.environment.deprecation'));
        }
        const appName = await (0, utils_1.resolveAppNameForEnvironment)(targetCompute);
        const response = await this.client.post(`/apps/${appName}/log-sessions`, {
            data: {
                tail: false,
                lines: logLines,
            },
        });
        const logURL = response.data.logplex_url;
        if (logURL) {
            await logStreamUtils.readLogs(logURL, false);
        }
        else {
            this.error("Couldn't retreive logs");
        }
        cli_ux_1.cli.action.stop();
    }
}
exports.default = Log;
Log.state = 'beta';
Log.enableJsonFlag = false;
Log.summary = messages.getMessage('summary');
Log.examples = messages.getMessages('examples');
Log.flags = {
    'target-compute': flags_1.FunctionsFlagBuilder.environment({
        description: messages.getMessage('flags.target-compute.summary'),
        exclusive: ['environment'],
    }),
    environment: flags_1.FunctionsFlagBuilder.environment({
        char: 'e',
        exclusive: ['target-compute'],
        hidden: true,
    }),
    num: core_2.Flags.integer({
        char: 'n',
        description: messages.getMessage('flags.num.summary'),
    }),
};
