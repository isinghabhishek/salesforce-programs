"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
const path = require("path");
const core_1 = require("@oclif/core");
const functions_core_1 = require("@hk/functions-core");
const core_2 = require("@salesforce/core");
core_2.Messages.importMessagesDirectory(__dirname);
const messages = core_2.Messages.loadMessages('@salesforce/plugin-functions', 'run.function.start.local');
class Local extends core_1.Command {
    async run() {
        const { flags } = await this.parse(Local);
        await this.runWithFlags(flags);
    }
    async runWithFlags(flags) {
        this.debug('running function locally');
        const localRun = Local.createLocalRun(flags.language, {
            path: flags.path,
            port: flags.port,
            debugPort: flags['debug-port'],
        });
        const localRunProcess = await localRun.exec();
        process.on('SIGINT', () => {
            localRunProcess.cancel();
        });
        await new Promise((resolve) => {
            localRunProcess.on('close', resolve);
        });
        this.debug('locally running function finished');
    }
}
exports.default = Local;
Local.description = messages.getMessage('summary');
Local.examples = messages.getMessages('examples');
Local.flags = {
    path: core_1.Flags.string({
        description: messages.getMessage('flags.path.summary'),
        default: path.resolve('.'),
        hidden: true,
    }),
    port: core_1.Flags.integer({
        char: 'p',
        description: messages.getMessage('flags.port.summary'),
        default: 8080,
    }),
    'debug-port': core_1.Flags.integer({
        char: 'b',
        description: messages.getMessage('flags.debug-port.summary'),
        default: 9229,
    }),
    language: core_1.Flags.enum({
        options: ['javascript', 'typescript', 'java', 'auto'],
        description: messages.getMessage('flags.language.summary'),
        char: 'l',
        default: 'auto',
    }),
};
// using a static to override the LocalRun constructor based on suggestion from https://github.com/oclif/oclif/issues/41
Local.createLocalRun = (lang, runnerOpts) => {
    return new functions_core_1.LocalRun(lang, runnerOpts);
};
