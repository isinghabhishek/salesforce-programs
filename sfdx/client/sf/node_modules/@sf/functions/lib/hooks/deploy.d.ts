import { StateAggregator } from '@salesforce/core';
import { Deployer, Deployable, SfHook } from '@salesforce/sf-plugins-core';
export declare type FunctionsDir = {
    name: string;
    fullPath: string;
};
export interface FunctionsDeployOptions {
    username?: string;
    branch?: string;
    force?: boolean;
    quiet?: boolean;
}
export declare class FunctionsDeployable extends Deployable {
    functionsDir: string;
    private parent;
    constructor(functionsDir: string, parent: Deployer);
    getName(): string;
    getType(): string;
    getPath(): string;
    getParent(): Deployer;
}
export declare class FunctionsDeployer extends Deployer {
    private functionsDir;
    protected stateAggregator: StateAggregator;
    protected TOKEN_BEARER_KEY: string;
    private auth?;
    private client?;
    private git?;
    static NAME: string;
    private username;
    private branch;
    private force;
    private quiet;
    constructor(functionsDir: string);
    getName(): string;
    setup(flags: Deployer.Flags, options: FunctionsDeployOptions): Promise<Deployer.Options>;
    deploy(): Promise<void>;
    promptForUsername(): Promise<string>;
    promptForBranch(): Promise<string>;
    promptForForce(): Promise<boolean>;
    promptForQuiet(): Promise<boolean>;
}
declare const hook: SfHook.Deploy<FunctionsDeployer>;
export default hook;
