"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const source_deploy_retrieve_1 = require("@salesforce/source-deploy-retrieve");
const deploy_1 = require("../../../utils/deploy");
const output_1 = require("../../../utils/output");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata.report');
class DeployMetadataReport extends sf_plugins_core_1.SfCommand {
    async run() {
        const flags = (await this.parse(DeployMetadataReport)).flags;
        const cache = await deploy_1.DeployCache.create();
        const jobId = cache.resolveLatest(flags['use-most-recent'], flags['job-id']);
        const deployOpts = cache.get(jobId);
        const org = await core_1.Org.create({ aliasOrUsername: deployOpts['target-org'] });
        const deployStatus = await org.getConnection().metadata.checkDeployStatus(jobId, true);
        const componentSet = await (0, deploy_1.buildComponentSet)({ ...deployOpts, wait: kit_1.Duration.minutes(deployOpts.wait) });
        const result = new source_deploy_retrieve_1.DeployResult(deployStatus, componentSet);
        const formatter = new output_1.DeployReportResultFormatter(result, deployOpts);
        if (!this.jsonEnabled())
            formatter.display();
        return formatter.getJson();
    }
}
exports.default = DeployMetadataReport;
DeployMetadataReport.description = messages.getMessage('description');
DeployMetadataReport.summary = messages.getMessage('summary');
DeployMetadataReport.examples = messages.getMessages('examples');
DeployMetadataReport.requiresProject = true;
DeployMetadataReport.state = 'beta';
DeployMetadataReport.flags = {
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        startsWith: '0Af',
        description: messages.getMessage('flags.job-id.description'),
        summary: messages.getMessage('flags.job-id.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        description: messages.getMessage('flags.use-most-recent.description'),
        summary: messages.getMessage('flags.use-most-recent.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
};
//# sourceMappingURL=report.js.map