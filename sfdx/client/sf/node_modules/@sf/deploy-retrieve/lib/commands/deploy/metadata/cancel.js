"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@salesforce/core");
const kit_1 = require("@salesforce/kit");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const deploy_1 = require("../../../utils/deploy");
const output_1 = require("../../../utils/output");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata.cancel');
class DeployMetadataCancel extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(DeployMetadataCancel);
        const cache = await deploy_1.DeployCache.create();
        const jobId = cache.resolveLatest(flags['use-most-recent'], flags['job-id']);
        const deployOpts = cache.get(jobId);
        if (flags.async) {
            const asyncResult = await (0, deploy_1.cancelDeployAsync)({ 'target-org': deployOpts['target-org'] }, jobId);
            const formatter = new output_1.AsyncDeployCancelResultFormatter(asyncResult.id);
            if (!this.jsonEnabled())
                formatter.display();
            return formatter.getJson();
        }
        else {
            const wait = flags.wait || kit_1.Duration.minutes(deployOpts.wait);
            const result = await (0, deploy_1.cancelDeploy)({ ...deployOpts, wait }, jobId);
            const formatter = new output_1.DeployCancelResultFormatter(result);
            if (!this.jsonEnabled())
                formatter.display();
            cache.update(result.response.id, { status: result.response.status });
            await cache.write();
            return formatter.getJson();
        }
    }
    catch(error) {
        if (error.name.includes('INVALID_ID_FIELD')) {
            const err = messages.createError('error.CannotCancelDeploy');
            return super.catch({ ...error, name: err.name, message: err.message, code: err.code });
        }
        return super.catch(error);
    }
}
exports.default = DeployMetadataCancel;
DeployMetadataCancel.description = messages.getMessage('description');
DeployMetadataCancel.summary = messages.getMessage('summary');
DeployMetadataCancel.examples = messages.getMessages('examples');
DeployMetadataCancel.requiresProject = true;
DeployMetadataCancel.state = 'beta';
DeployMetadataCancel.flags = {
    async: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.async.summary'),
        description: messages.getMessage('flags.async.description'),
        exclusive: ['wait'],
    }),
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        startsWith: '0Af',
        description: messages.getMessage('flags.job-id.description'),
        summary: messages.getMessage('flags.job-id.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        description: messages.getMessage('flags.use-most-recent.description'),
        summary: messages.getMessage('flags.use-most-recent.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
        unit: 'minutes',
        helpValue: '<minutes>',
        min: 1,
        exclusive: ['async'],
    }),
};
//# sourceMappingURL=cancel.js.map