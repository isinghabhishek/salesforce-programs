"use strict";
/*
 * Copyright (c) 2022, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
Object.defineProperty(exports, "__esModule", { value: true });
const chalk_1 = require("chalk");
const core_1 = require("@salesforce/core");
const sf_plugins_core_1 = require("@salesforce/sf-plugins-core");
const kit_1 = require("@salesforce/kit");
const output_1 = require("../../../utils/output");
const progressBar_1 = require("../../../utils/progressBar");
const deploy_1 = require("../../../utils/deploy");
const errorCodes_1 = require("../../../utils/errorCodes");
core_1.Messages.importMessagesDirectory(__dirname);
const messages = core_1.Messages.loadMessages('@salesforce/plugin-deploy-retrieve', 'deploy.metadata.resume');
class DeployMetadataResume extends sf_plugins_core_1.SfCommand {
    async run() {
        const { flags } = await this.parse(DeployMetadataResume);
        const cache = await deploy_1.DeployCache.create();
        const jobId = cache.resolveLatest(flags['use-most-recent'], flags['job-id']);
        const deployOpts = cache.get(jobId);
        if ((0, deploy_1.isNotResumable)(deployOpts.status)) {
            throw messages.createError('error.DeployNotResumable', [jobId, deployOpts.status]);
        }
        const wait = flags.wait || kit_1.Duration.minutes(deployOpts.wait);
        const { deploy, componentSet } = await (0, deploy_1.executeDeploy)(
        // there will always be conflicts on a resume if anything deployed--the changes on the server are not synced to local
        { ...deployOpts, wait, 'dry-run': false, 'ignore-conflicts': true }, this.project, jobId);
        this.log((0, output_1.getVersionMessage)('Resuming Deployment', componentSet, deployOpts.api));
        this.log(`Deploy ID: ${(0, chalk_1.bold)(jobId)}`);
        new progressBar_1.DeployProgress(deploy, this.jsonEnabled()).start();
        const result = await deploy.pollStatus(500, wait.seconds);
        process.exitCode = (0, deploy_1.determineExitCode)(result);
        const formatter = new output_1.DeployResultFormatter(result, {
            ...flags,
            verbose: deployOpts.verbose,
            concise: deployOpts.concise,
        });
        if (!this.jsonEnabled())
            formatter.display();
        cache.update(deploy.id, { status: result.response.status });
        await cache.write();
        return formatter.getJson();
    }
}
exports.default = DeployMetadataResume;
DeployMetadataResume.description = messages.getMessage('description');
DeployMetadataResume.summary = messages.getMessage('summary');
DeployMetadataResume.examples = messages.getMessages('examples');
DeployMetadataResume.requiresProject = true;
DeployMetadataResume.state = 'beta';
DeployMetadataResume.flags = {
    concise: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.concise.summary'),
        exclusive: ['verbose'],
    }),
    'job-id': sf_plugins_core_1.Flags.salesforceId({
        char: 'i',
        startsWith: '0Af',
        description: messages.getMessage('flags.job-id.description'),
        summary: messages.getMessage('flags.job-id.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    'use-most-recent': sf_plugins_core_1.Flags.boolean({
        char: 'r',
        description: messages.getMessage('flags.use-most-recent.description'),
        summary: messages.getMessage('flags.use-most-recent.summary'),
        exactlyOne: ['use-most-recent', 'job-id'],
    }),
    verbose: sf_plugins_core_1.Flags.boolean({
        summary: messages.getMessage('flags.verbose.summary'),
        exclusive: ['concise'],
    }),
    wait: sf_plugins_core_1.Flags.duration({
        char: 'w',
        summary: messages.getMessage('flags.wait.summary'),
        description: messages.getMessage('flags.wait.description'),
        unit: 'minutes',
        helpValue: '<minutes>',
        min: 1,
    }),
};
DeployMetadataResume.envVariablesSection = (0, sf_plugins_core_1.toHelpSection)('ENVIRONMENT VARIABLES', core_1.EnvironmentVariable.SF_USE_PROGRESS_BAR);
DeployMetadataResume.errorCodes = (0, sf_plugins_core_1.toHelpSection)('ERROR CODES', errorCodes_1.DEPLOY_STATUS_CODES_DESCRIPTIONS);
//# sourceMappingURL=resume.js.map