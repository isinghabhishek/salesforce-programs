import { Org, SfProject, TTLConfig } from '@salesforce/core';
import { Duration } from '@salesforce/kit';
import { JsonMap, Nullable } from '@salesforce/ts-types';
import { ComponentSet, DeployResult, MetadataApiDeploy, RequestStatus } from '@salesforce/source-deploy-retrieve';
import { SourceTracking } from '@salesforce/source-tracking';
import { API, PathInfo, TestLevel } from './types';
export declare type DeployOptions = {
    api: API;
    'target-org': string;
    'test-level': TestLevel;
    async?: boolean;
    'api-version'?: string;
    'dry-run'?: boolean;
    'ignore-conflicts'?: boolean;
    'ignore-errors'?: boolean;
    'ignore-warnings'?: boolean;
    manifest?: string;
    metadata?: string[];
    'metadata-dir'?: PathInfo;
    'source-dir'?: string[];
    tests?: string[];
    wait?: Duration;
    verbose?: boolean;
    concise?: boolean;
    'single-package'?: boolean;
    status?: RequestStatus;
};
export declare type CachedOptions = Omit<DeployOptions, 'wait'> & {
    wait: number;
};
export declare function validateTests(testLevel: TestLevel, tests: Nullable<string[]>): boolean;
export declare function resolveApi(): Promise<API>;
export declare function buildComponentSet(opts: Partial<DeployOptions>, stl?: SourceTracking): Promise<ComponentSet>;
export declare function executeDeploy(opts: Partial<DeployOptions>, project?: SfProject, id?: string): Promise<{
    deploy: MetadataApiDeploy;
    componentSet: ComponentSet;
}>;
export declare function cancelDeploy(opts: Partial<DeployOptions>, id: string): Promise<DeployResult>;
export declare function cancelDeployAsync(opts: Partial<DeployOptions>, id: string): Promise<{
    id: string;
}>;
export declare function poll(org: Org, id: string, wait: Duration, componentSet: ComponentSet): Promise<DeployResult>;
export declare function determineExitCode(result: DeployResult, async?: boolean): number;
export declare function isNotResumable(status: RequestStatus): boolean;
export declare class DeployCache extends TTLConfig<TTLConfig.Options, CachedOptions> {
    static getFileName(): string;
    static getDefaultOptions(): TTLConfig.Options;
    static set(key: string, value: Partial<CachedOptions>): Promise<void>;
    static unset(key: string): Promise<void>;
    static update(key: string, obj: JsonMap): Promise<void>;
    resolveLatest(useMostRecent: boolean, key: Nullable<string>, throwOnNotFound?: boolean): string;
    resolveLongId(jobId: string): string;
    get(jobId: string): TTLConfig.Entry<CachedOptions>;
}
