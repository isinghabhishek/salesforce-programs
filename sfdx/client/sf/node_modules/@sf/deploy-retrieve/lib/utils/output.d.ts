import { DeployResult, FileResponse, RetrieveResult, Failures, Successes, ComponentSet } from '@salesforce/source-deploy-retrieve';
import { API, AsyncDeployResultJson, DeployResultJson, MetadataRetrieveResultJson, RetrieveResultJson, TestLevel } from './types';
export declare function asRelativePaths(fileResponses: FileResponse[]): FileResponse[];
/**
 * Sorts file responds by type, then by filePath, then by fullName
 */
export declare function sortFileResponses(fileResponses: FileResponse[]): FileResponse[];
export declare function sortTestResults(results?: Failures[] | Successes[]): Failures[] | Successes[];
export declare function toArray<T>(entryOrArray: T | T[] | undefined): T[];
export declare function getVersionMessage(action: string, componentSet: ComponentSet, api: API): string;
interface Formatter<T> {
    getJson: () => T;
    display: () => void;
}
export declare class DeployResultFormatter implements Formatter<DeployResultJson> {
    protected result: DeployResult;
    protected flags: Partial<{
        'test-level': TestLevel;
        verbose: boolean;
        concise: boolean;
    }>;
    private relativeFiles;
    private absoluteFiles;
    private testLevel;
    private verbosity;
    constructor(result: DeployResult, flags: Partial<{
        'test-level': TestLevel;
        verbose: boolean;
        concise: boolean;
    }>);
    getJson(): DeployResultJson;
    display(): void;
    private displaySuccesses;
    private displayFailures;
    private displayDeletes;
    private displayTestResults;
    private displayVerboseTestSuccesses;
    private displayVerboseTestFailures;
    private displayVerboseTestCoverage;
    private determineVerbosity;
}
export declare class DeployReportResultFormatter extends DeployResultFormatter {
    display(): void;
}
export declare class AsyncDeployResultFormatter implements Formatter<AsyncDeployResultJson> {
    private id;
    constructor(id: string);
    getJson(): AsyncDeployResultJson;
    display(): void;
}
export declare class DeployCancelResultFormatter implements Formatter<DeployResultJson> {
    protected result: DeployResult;
    constructor(result: DeployResult);
    getJson(): DeployResultJson;
    display(): void;
}
export declare class AsyncDeployCancelResultFormatter implements Formatter<AsyncDeployResultJson> {
    private id;
    constructor(id: string);
    getJson(): DeployResultJson;
    display(): void;
}
export declare class RetrieveResultFormatter implements Formatter<RetrieveResultJson> {
    private result;
    private packageNames;
    private files;
    constructor(result: RetrieveResult, packageNames?: string[], deleteResponses?: FileResponse[]);
    getJson(): RetrieveResultJson;
    display(): Promise<void>;
    private displaySuccesses;
    private displayPackages;
    private getPackages;
}
export declare class MetadataRetrieveResultFormatter implements Formatter<MetadataRetrieveResultJson> {
    private result;
    private opts;
    private zipFilePath;
    private files;
    constructor(result: RetrieveResult, opts: {
        'target-metadata-dir': string;
        'zip-file-name': string;
        unzip: boolean;
    });
    getJson(): MetadataRetrieveResultJson;
    display(): Promise<void>;
}
export {};
