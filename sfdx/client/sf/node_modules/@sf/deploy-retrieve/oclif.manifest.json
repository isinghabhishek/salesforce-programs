{"version":"1.6.0","commands":{"deploy":{"id":"deploy","summary":"Deploy a project interactively to any Salesforce environment.","description":"This command must be run from within a project.\n\nThe command first analyzes your project, your active or logged-into environments, and local defaults to determine what to deploy and where to deploy it. The command then prompts you for information about this particular deployment and provides intelligent choices based on its analysis.\n\nFor example, if your local project contains a source directory with metadata files in source format, the command asks if you want to deploy that Salesforce app to an org. The command lists your connected orgs and asks which one you want to deploy to. The list of orgs starts with scratch orgs, ordered by expiration date with the most recently created one first, and then Dev Hub and production orgs ordered by name. If the command finds Apex tests, it asks if you want to run them and at which level.\n\nThe command stores your responses in the \"deploy-options.json\" file in your local project directory and uses them as defaults when you rerun the command. Specify --interactive to force the command to reprompt.\n\nUse this command for quick and simple deploys. For more complicated deployments, use the environment-specific commands, such as \"sf deploy metadata\", that provide additional flags.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","aliases":[],"examples":["Deploy a project and use stored values from a previous command run:\n<%= config.bin %> <%= command.id %>","Reprompt for all deployment inputs:\n<%= config.bin %> <%= command.id %> --interactive"],"flags":{"interactive":{"name":"interactive","type":"boolean","summary":"Force the CLI to prompt for all deployment inputs.","allowNo":false}},"args":[],"_enableJsonFlag":false},"deploy:metadata":{"id":"deploy:metadata","summary":"Deploy metadata in source format to an org from your local project.","description":"You must run this command from within a project.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production org, never allow source tracking. You can also use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.\n\nTo deploy multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["Deploy local changes not in the org:\n<%= config.bin %> <%= command.id %>","Deploy the source files in a directory:\n<%= config.bin %> <%= command.id %>  --source-dir path/to/source","Deploy a specific Apex class and the objects whose source is in a directory (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls path/to/source/objects\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects","Deploy all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass","Deploy a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass","Deploy all custom objects and Apex classes (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass","Deploy all Apex classes and a profile that has a space in its name:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --metadata \"Profile:My Profile\"","Deploy all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml","Run the tests that aren’t in any managed packages as part of a deployment:\n<%= config.bin %> <%= command.id %> --metadata ApexClass --test-level RunLocalTests"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"api-version":{"name":"api-version","type":"option","char":"a","summary":"Target API version for the deploy.","description":"Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.","multiple":false},"async":{"name":"async","type":"boolean","summary":"Run the command asynchronously.","description":"The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume the deployment, run \"sf deploy metadata resume\". To check the status of the deployment, run \"sf deploy metadata report\".","allowNo":false,"exclusive":["wait"]},"concise":{"name":"concise","type":"boolean","summary":"Show concise output of the deploy result.","allowNo":false,"exclusive":["verbose"]},"dry-run":{"name":"dry-run","type":"boolean","summary":"Validate deploy and run Apex tests but don’t save to the org.","allowNo":false},"ignore-conflicts":{"name":"ignore-conflicts","type":"boolean","char":"c","summary":"Ignore conflicts and deploy local files, even if they overwrite changes in the org.","description":"This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.","allowNo":false},"ignore-errors":{"name":"ignore-errors","type":"boolean","char":"r","summary":"Ignore any errors and don’t roll back deployment.","description":"When deploying to a production org, keep this flag set to false (default value). When set to true, components without errors are deployed and components with errors are skipped, and could result in an inconsistent production org.","allowNo":false},"ignore-warnings":{"name":"ignore-warnings","type":"boolean","char":"g","summary":"Ignore warnings and allow a deployment to complete successfully.","description":"If a warning occurs and this flag is set to true, the success status of the deployment is set to true. When this flag is set to false, success is set to false, and the warning is treated like an error.","allowNo":false},"manifest":{"name":"manifest","type":"option","char":"x","summary":"Full file path for manifest (package.xml) of components to deploy.","description":"All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.","multiple":false,"exclusive":["source-dir","metadata","metadata-dir"]},"metadata":{"name":"metadata","type":"option","char":"m","summary":"Metadata component names to deploy.","multiple":true,"exclusive":["manifest","source-dir","metadata-dir"]},"metadata-dir":{"name":"metadata-dir","type":"option","summary":"Root of directory or zip file of metadata formatted files to deploy.","multiple":false,"exclusive":["manifest","source-dir","metadata"]},"single-package":{"name":"single-package","type":"boolean","summary":"Indicates that the metadata zip file points to a directory structure for a single package.","allowNo":false,"dependsOn":["metadata-dir"]},"source-dir":{"name":"source-dir","type":"option","char":"d","summary":"Path to the local source files to deploy.","description":"The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.","multiple":true,"exclusive":["manifest","metadata","metadata-dir"]},"target-org":{"name":"target-org","type":"option","char":"o","summary":"Login username or alias for the target org.","description":"Overrides your default org.","multiple":false},"tests":{"name":"tests","type":"option","char":"t","summary":"Apex tests to run when --test-level is RunSpecifiedTests.","description":"Separate multiple test names with commas, and enclose the entire flag value in double quotes if a test contains a space.","multiple":true},"test-level":{"name":"test-level","type":"option","char":"l","summary":"Deployment Apex testing level.","description":"Valid values are:\n\n- NoTestRun — No tests are run. This test level applies only to deployments to development environments, such as sandbox, Developer Edition, or trial orgs. This test level is the default for development environments.\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --run-tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\n  If you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see [Running Tests in a Deployment](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the \"Metadata API Developer Guide\".","multiple":false,"options":["NoTestRun","RunSpecifiedTests","RunLocalTests","RunAllTestsInOrg"],"default":"NoTestRun"},"verbose":{"name":"verbose","type":"boolean","summary":"Show verbose output of the deploy result.","allowNo":false,"exclusive":["concise"]},"wait":{"name":"wait","type":"option","char":"w","summary":"Number of minutes to wait for command to complete and display results.","description":"If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume the deployment, run \"sf deploy metadata resume\". To check the status of the deployment, run \"sf deploy metadata report\".","helpValue":"<minutes>","multiple":false,"exclusive":["async"]}},"args":[],"requiresProject":true,"configurationVariablesSection":{"header":"CONFIGURATION VARIABLES","body":[{"name":"target-org","description":"Username or alias of the org that all commands run against by default. (sf only)"},{"name":"org-api-version","description":"API version of your project. Default: API version of your Dev Hub org."}]},"envVariablesSection":{"header":"ENVIRONMENT VARIABLES","body":[{"name":"SF_TARGET_ORG","description":"Username or alias of your default org. Overrides the target-org configuration variable."},{"name":"SF_USE_PROGRESS_BAR","description":"Set to false to disable the progress bar when running the metadata deploy command."}]},"errorCodes":{"header":"ERROR CODES","body":[{"name":"Succeeded (0)","description":"The deploy succeeded."},{"name":"Canceled (1)","description":"The deploy was canceled."},{"name":"Failed (1)","description":"The deploy failed."},{"name":"SucceededPartial (68)","description":"The deploy partially succeeded."},{"name":"InProgress (69)","description":"The deploy is in progress."},{"name":"Pending (69)","description":"The deploy is pending."},{"name":"Canceling (69)","description":"The deploy is being canceled."}]},"hasDynamicHelp":true},"retrieve:metadata":{"id":"retrieve:metadata","summary":"Retrieve metadata in source format from an org to your local project.","description":"You must run this command from within a project.\n\nIf your org allows source tracking, then this command tracks the changes in your source. Some orgs, such as production org, never allow source tracking. You can also use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.\n\nTo retrieve multiple metadata components, either use multiple --metadata <name> flags or use a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["Retrieve remote changes:\n<%= config.bin %> <%= command.id %>","Retrieve the source files in a directory:\n<%= config.bin %> <%= command.id %> --source-dir path/to/source","Retrieve a specific Apex class and the objects whose source is in a directory (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls path/to/source/objects\n<%= config.bin %> <%= command.id %> --source-dir path/to/apex/classes/MyClass.cls --source-dir path/to/source/objects","Retrieve all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass","Retrieve a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass","Retrieve all custom objects and Apex classes (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --metadata CustomObject ApexClass\n<%= config.bin %> <%= command.id %> --metadata CustomObject --metadata ApexClass","Retrieve all metadata components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml","Retrieve metadata from a package:\n<%= config.bin %> <%= command.id %> --package-name MyPackageName","Retrieve metadata from multiple packages, one of which has a space in its name (both examples are equivalent):\n<%= config.bin %> <%= command.id %> --package-name Package1 \"PackageName With Spaces\" Package3\n<%= config.bin %> <%= command.id %> --package-name Package1 --package-name \"PackageName With Spaces\" --package-name Package3","Retrieve using Metadata API\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output","Retrieve using Metadata API and automatically unzip the contents\n<%= config.bin %> <%= command.id %> --source-dir force-app --target-metadata-dir output --unzip"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"api-version":{"name":"api-version","type":"option","char":"a","summary":"Target API version for the retrieve.","description":"Use this flag to override the default API version, which is the latest version supported the CLI, with the API version in your package.xml file.","multiple":false},"ignore-conflicts":{"name":"ignore-conflicts","type":"boolean","char":"c","summary":"Ignore conflicts and retrieve and save files to your local filesystem, even if they overwrite your local changes.","description":"This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.","allowNo":false},"manifest":{"name":"manifest","type":"option","char":"x","summary":"File path for the manifest (package.xml) that specifies the components to retrieve.","description":"If you specify this parameter, don’t specify --metadata or --source-dir.","multiple":false,"exclusive":["metadata","source-dir"]},"metadata":{"name":"metadata","type":"option","char":"m","summary":"Metadata component names to retrieve.","multiple":true,"exclusive":["manifest","source-dir"]},"package-name":{"name":"package-name","type":"option","char":"n","summary":"Package names to retrieve.","multiple":true},"single-package":{"name":"single-package","type":"boolean","summary":"Indicates that the zip file points to a directory structure for a single package.","allowNo":false,"dependsOn":["target-metadata-dir"],"exclusive":["ignore-conflicts"]},"source-dir":{"name":"source-dir","type":"option","char":"d","summary":"File paths for source to retrieve from the org.","description":"The supplied paths can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all source files in the directory and its subdirectories).","multiple":true,"exclusive":["manifest","metadata"]},"target-metadata-dir":{"name":"target-metadata-dir","type":"option","char":"t","summary":"Directory root for the retrieved files.","multiple":false,"relationships":[{"type":"some","flags":["manifest","metadata","source-dir","package-name"]}],"exclusive":["ignore-conflicts"]},"target-org":{"name":"target-org","type":"option","char":"o","summary":"Login username or alias for the target org.","description":"Overrides your default org.","multiple":false},"wait":{"name":"wait","type":"option","char":"w","summary":"Number of minutes to wait for the command to complete and display results to the terminal window.","description":"If the command continues to run after the wait period, the CLI returns control of the terminal window to you.","multiple":false},"unzip":{"name":"unzip","type":"boolean","char":"z","summary":"Extract all files from the retrieved zip file.","allowNo":false,"dependsOn":["target-metadata-dir"],"exclusive":["ignore-conflicts"]},"zip-file-name":{"name":"zip-file-name","type":"option","summary":"File name to use for the retrieved zip file.","multiple":false,"dependsOn":["target-metadata-dir"],"exclusive":["ignore-conflicts"]}},"args":[],"requiresProject":true,"configurationVariablesSection":{"header":"CONFIGURATION VARIABLES","body":[{"name":"target-org","description":"Username or alias of the org that all commands run against by default. (sf only)"},{"name":"org-api-version","description":"API version of your project. Default: API version of your Dev Hub org."}]},"envVariablesSection":{"header":"ENVIRONMENT VARIABLES","body":[{"name":"SF_TARGET_ORG","description":"Username or alias of your default org. Overrides the target-org configuration variable."},{"name":"SF_USE_PROGRESS_BAR","description":"Set to false to disable the progress bar when running the metadata deploy command."}]},"hasDynamicHelp":true},"deploy:metadata:cancel":{"id":"deploy:metadata:cancel","summary":"Cancel a deploy operation.","description":"Use this command to cancel a deploy operation that hasn't yet completed in the org. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["Cancel a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2","Cancel the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"async":{"name":"async","type":"boolean","summary":"Run the command asynchronously.","description":"The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the cancellation, run \"sf deploy metadata resume\". To check the status of the cancellation, run \"sf deploy metadata report\".","allowNo":false,"exclusive":["wait"]},"job-id":{"name":"job-id","type":"option","char":"i","summary":"Job ID of the deploy operation you want to cancel.","description":"These commands return a job ID if they time out or you specified the --async flag:\n\n- sf deploy metadata\n- sf deploy metadata validate\n- sf deploy metadata quick\n- sf deploy metadata cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.","multiple":false},"use-most-recent":{"name":"use-most-recent","type":"boolean","char":"r","summary":"Use the job ID of the most recent deploy operation.","description":"For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent deploy operations was more than 3 days ago, this flag won't find a job ID.","allowNo":false},"wait":{"name":"wait","type":"option","char":"w","summary":"Number of minutes to wait for the command to complete and display results.","description":"If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the cancellation, run \"sf deploy metadata resume\". To check the status of the cancellation, run \"sf deploy metadata report\".","helpValue":"<minutes>","multiple":false,"exclusive":["async"]}},"args":[],"requiresProject":true},"deploy:metadata:preview":{"id":"deploy:metadata:preview","summary":"Preview a deployment to see what will deploy to the org, the potential conflicts, and the ignored files.","description":"You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"sf deploy metadata\" command. The table lists the metadata components that will be deployed and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be deployed because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command considers conflicts between the org and local. Some orgs, such as production orgs, never allow source tracking. Use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.\n\nTo preview the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["NOTE: The commands to preview a deployment and actually deploy it use similar flags. We provide a few preview examples here, but see the help for \"sf deploy metadata\" for more examples that you can adapt for previewing.","Preview the deployment of source files in a directory, such as force-app:\n<%= config.bin %> <%= command.id %>  --source-dir force-app","Preview the deployment of all Apex classes:\n<%= config.bin %> <%= command.id %> --metadata ApexClass","Preview deployment of a specific Apex class:\n<%= config.bin %> <%= command.id %> --metadata ApexClass:MyApexClass","Preview deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"ignore-conflicts":{"name":"ignore-conflicts","type":"boolean","char":"c","summary":"Ignore conflicts and deploy local files, even if they overwrite changes in the org.","description":"This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.","allowNo":false},"manifest":{"name":"manifest","type":"option","char":"x","summary":"Full file path for manifest (package.xml) of components to preview.","description":"All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.","multiple":false,"exclusive":["source-dir","metadata"]},"metadata":{"name":"metadata","type":"option","char":"m","summary":"Metadata component names to preview.","multiple":true,"exclusive":["manifest","source-dir"]},"source-dir":{"name":"source-dir","type":"option","char":"d","summary":"Path to the local source files to preview.","description":"The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.","multiple":true,"exclusive":["manifest","metadata"]},"target-org":{"name":"target-org","type":"option","char":"o","summary":"Login username or alias for the target org.","description":"Overrides your default org.","multiple":false}},"args":[],"requiresProject":true,"hasDynamicHelp":true},"deploy:metadata:quick":{"id":"deploy:metadata:quick","summary":"Quickly deploy a validated deployment to an org.","description":"Before you run this command, first create a validated deployment with the \"sf deploy metadata validate\" command, which returns a job ID. Validated deployments haven't been deployed to the org yet; you deploy them with this command. Either pass the job ID to this command or use the --use-most-recent flag to use the job ID of the most recently validated deployment. For the quick deploy to succeed, the associated validated deployment must also have succeeded.\n\nExecuting this quick deploy command takes less time than a standard deploy because it skips running Apex tests. These tests were previously run as part of the validation. Validating first and then running a quick deploy is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nThis command doesn't support source-tracking. The source you deploy overwrites the corresponding metadata in your org. This command doesn’t attempt to merge your source with the versions in your org.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["Run a quick deploy to your default org using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2","Asynchronously run a quick deploy of the most recently validated deployment to an org with alias \"my-prod-org\":\n<%= config.bin %> <%= command.id %> --async --use-most-recent --target-org my-prod-org"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"async":{"name":"async","type":"boolean","summary":"Run the command asynchronously.","description":"The command immediately returns the control of the terminal to you. This way, you can continue to use the CLI. To resume watching the deploy, run \"sf deploy metadata resume\". To check the status of the deploy, run \"sf deploy metadata report\".","allowNo":false,"exclusive":["wait"]},"concise":{"name":"concise","type":"boolean","summary":"Show concise output of the deploy result.","allowNo":false,"exclusive":["verbose"]},"job-id":{"name":"job-id","type":"option","char":"i","summary":"Job ID of the deployment you want to quick deploy.","description":"The job ID is valid for 10 days from when you started the validation.","multiple":false},"target-org":{"name":"target-org","type":"option","char":"o","summary":"Login username or alias for the target org.","description":"Overrides your default org.","multiple":false},"use-most-recent":{"name":"use-most-recent","type":"boolean","char":"r","summary":"Use the job ID of the most recently validated deployment.","description":"For performance reasons, this flag uses only job IDs that were validated in the past 3 days or less. If your most recent deployment validation was more than 3 days ago, this flag won't find a job ID.","allowNo":false},"verbose":{"name":"verbose","type":"boolean","summary":"Show verbose output of the deploy result.","allowNo":false,"exclusive":["concise"]},"wait":{"name":"wait","type":"option","char":"w","summary":"Number of minutes to wait for the command to complete and display results.","description":"If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy, run \"sf deploy metadata resume\". To check the status of the deploy, run \"sf deploy metadata report\".","helpValue":"<minutes>","multiple":false,"exclusive":["async"]}},"args":[],"requiresProject":true,"errorCodes":{"header":"ERROR CODES","body":[{"name":"Succeeded (0)","description":"The deploy succeeded."},{"name":"Canceled (1)","description":"The deploy was canceled."},{"name":"Failed (1)","description":"The deploy failed."},{"name":"SucceededPartial (68)","description":"The deploy partially succeeded."},{"name":"InProgress (69)","description":"The deploy is in progress."},{"name":"Pending (69)","description":"The deploy is pending."},{"name":"Canceling (69)","description":"The deploy is being canceled."}]},"hasDynamicHelp":true},"deploy:metadata:report":{"id":"deploy:metadata:report","summary":"Check the status of a deploy operation.","description":"Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["Check the status using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2","Check the status of the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"job-id":{"name":"job-id","type":"option","char":"i","summary":"Job ID of the deploy operation you want to check the status of.","description":"These commands return a job ID if they time out or you specified the --async flag:\n\n- sf deploy metadata\n- sf deploy metadata validate\n- sf deploy metadata quick\n- sf deploy metadata cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.","multiple":false},"use-most-recent":{"name":"use-most-recent","type":"boolean","char":"r","summary":"Use the job ID of the most recent deploy operation.","description":"For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.","allowNo":false}},"args":[],"requiresProject":true},"deploy:metadata:resume":{"id":"deploy:metadata:resume","summary":"Resume watching a deploy operation.","description":"Use this command to resume watching a deploy operation if the original command times out or you specified the --async flag. Deploy operations include standard deploys, quick deploys, deploy validations, and deploy cancellations. This command doesn't resume the original operation itself, because the operation always continues after you've started it, regardless of whether you're watching it or not.\n\nRun this command by either passing it a job ID or specifying the --use-most-recent flag to use the job ID of the most recent deploy operation.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["Resume watching a deploy operation using a job ID:\n<%= config.bin %> <%= command.id %> --job-id 0Af0x000017yLUFCA2","Resume watching the most recent deploy operation:\n<%= config.bin %> <%= command.id %> --use-most-recent"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"concise":{"name":"concise","type":"boolean","summary":"Show concise output of the deploy operation result.","allowNo":false,"exclusive":["verbose"]},"job-id":{"name":"job-id","type":"option","char":"i","summary":"Job ID of the deploy operation you want to resume.","description":"These commands return a job ID if they time out or you specified the --async flag:\n\n- sf deploy metadata\n- sf deploy metadata validate\n- sf deploy metadata quick\n- sf deploy metadata cancel\n\nThe job ID is valid for 10 days from when you started the deploy operation.","multiple":false},"use-most-recent":{"name":"use-most-recent","type":"boolean","char":"r","summary":"Use the job ID of the most recent deploy operation.","description":"For performance reasons, this flag uses job IDs for deploy operations that started only in the past 3 days or less. If your most recent operation was more than 3 days ago, this flag won't find a job ID.","allowNo":false},"verbose":{"name":"verbose","type":"boolean","summary":"Show verbose output of the deploy operation result.","allowNo":false,"exclusive":["concise"]},"wait":{"name":"wait","type":"option","char":"w","summary":"Number of minutes to wait for the command to complete and display results.","description":"If the command continues to run after the wait period, the CLI returns control of the terminal window to you. To resume watching the deploy operation, run this command again. To check the status of the deploy operation, run \"sf deploy metadata report\".","helpValue":"<minutes>","multiple":false}},"args":[],"requiresProject":true,"envVariablesSection":{"header":"ENVIRONMENT VARIABLES","body":[{"name":"SF_USE_PROGRESS_BAR","description":"Set to false to disable the progress bar when running the metadata deploy command."}]},"errorCodes":{"header":"ERROR CODES","body":[{"name":"Succeeded (0)","description":"The deploy succeeded."},{"name":"Canceled (1)","description":"The deploy was canceled."},{"name":"Failed (1)","description":"The deploy failed."},{"name":"SucceededPartial (68)","description":"The deploy partially succeeded."},{"name":"InProgress (69)","description":"The deploy is in progress."},{"name":"Pending (69)","description":"The deploy is pending."},{"name":"Canceling (69)","description":"The deploy is being canceled."}]}},"deploy:metadata:validate":{"id":"deploy:metadata:validate","summary":"Validate a metadata deployment without actually executing it.","description":"Use this command to verify whether a deployment will succeed without actually deploying the metadata to your org. This command is similar to \"sf deploy metadata\", except you're required to run Apex tests, and the command returns a job ID rather than executing the deployment. If the validation succeeds, then you pass this job ID to the \"sf deploy metadata quick\" command to actually deploy the metadata. This quick deploy takes less time because it skips running Apex tests. The job ID is valid for 10 days from when you started the validation. Validating first is useful if the deployment to your production org take several hours and you don’t want to risk a failed deploy.\n\nYou must run this command from within a project.\n\nThis command doesn't support source-tracking. When you quick deploy with the resulting job ID, the source you deploy overwrites the corresponding metadata in your org.\n\nTo validate the deployment of multiple metadata components, either set multiple --metadata <name> flags or a single --metadata flag with multiple names separated by spaces. Enclose names that contain spaces in one set of double quotes. The same syntax applies to --manifest and --source-dir.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["NOTE: These examples focus on validating large deployments. See the help for \"sf deploy metadata\" for examples of deploying smaller sets of metadata which you can also use to validate.","Validate the deployment of all source files in a directory to the default org:\n<%= config.bin %> <%= command.id %> --source-dir path/to/source","Asynchronously validate the deployment and run all tests in the org with alias \"my-prod-org\"; command immediately returns the job ID:\n<%= config.bin %> <%= command.id %> --source-dir path/to/source --async --test-level RunAllTestsInOrg --target-org my-prod-org","Validate the deployment of all components listed in a manifest:\n<%= config.bin %> <%= command.id %> --manifest path/to/package.xml"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"api-version":{"name":"api-version","type":"option","char":"a","summary":"Target API version for the validation.","description":"Use this flag to override the default API version with the API version of your package.xml file. The default API version is the latest version supported by the CLI.","multiple":false},"async":{"name":"async","type":"boolean","summary":"Run the command asynchronously.","description":"The command immediately returns the job ID and control of the terminal to you. This way, you can continue to use the CLI. To resume watching the validation, run \"sf deploy metadata resume\". To check the status of the validation, run \"sf deploy metadata report\".","allowNo":false},"concise":{"name":"concise","type":"boolean","summary":"Show concise output of the validation result.","allowNo":false,"exclusive":["verbose"]},"manifest":{"name":"manifest","type":"option","char":"x","summary":"Full file path for manifest (package.xml) of components to validate for deployment.","description":"All child components are included. If you specify this flag, don’t specify --metadata or --source-dir.","multiple":false},"metadata":{"name":"metadata","type":"option","char":"m","summary":"Metadata component names to validate for deployment.","multiple":true},"source-dir":{"name":"source-dir","type":"option","char":"d","summary":"Path to the local source files to validate for deployment.","description":"The supplied path can be to a single file (in which case the operation is applied to only one file) or to a folder (in which case the operation is applied to all metadata types in the directory and its subdirectories).\n\nIf you specify this flag, don’t specify --metadata or --manifest.","multiple":true},"metadata-dir":{"name":"metadata-dir","type":"option","summary":"Root of directory or zip file of metadata formatted files to deploy.","multiple":false},"single-package":{"name":"single-package","type":"boolean","summary":"Indicates that the metadata zip file points to a directory structure for a single package.","allowNo":false,"dependsOn":["metadata-dir"]},"target-org":{"name":"target-org","type":"option","char":"o","summary":"Login username or alias for the target org.","description":"Overrides your default org.","multiple":false},"tests":{"name":"tests","type":"option","char":"t","summary":"Apex tests to run when --test-level is RunSpecifiedTests.","multiple":true},"test-level":{"name":"test-level","type":"option","char":"l","summary":"Deployment Apex testing level.","description":"Valid values are:\n\n- RunSpecifiedTests — Runs only the tests that you specify with the --run-tests flag. Code coverage requirements differ from the default coverage requirements when using this test level. Executed tests must comprise a minimum of 75% code coverage for each class and trigger in the deployment package. This coverage is computed for each class and trigger individually and is different than the overall coverage percentage.\n\n- RunLocalTests — All tests in your org are run, except the ones that originate from installed managed and unlocked packages. This test level is the default for production deployments that include Apex classes or triggers.\n\n- RunAllTestsInOrg — All tests in your org are run, including tests of managed packages.\n\nIf you don’t specify a test level, the default behavior depends on the contents of your deployment package. For more information, see [Running Tests in a Deployment](https://developer.salesforce.com/docs/atlas.en-us.api_meta.meta/api_meta/meta_deploy_running_tests.htm) in the \"Metadata API Developer Guide\".","multiple":false,"options":["RunAllTestsInOrg","RunLocalTests","RunSpecifiedTests"],"default":"RunLocalTests"},"verbose":{"name":"verbose","type":"boolean","summary":"Show verbose output of the validation result.","allowNo":false,"exclusive":["concise"]},"wait":{"name":"wait","type":"option","char":"w","summary":"Number of minutes to wait for the command to complete and display results.","description":"If the command continues to run after the wait period, the CLI returns control of the terminal window to you and returns the job ID. To resume watching the validation, run \"sf deploy metadata resume\". To check the status of the validation, run \"sf deploy metadata report\".","helpValue":"<minutes>","multiple":false}},"args":[],"requiresProject":true,"configurationVariablesSection":{"header":"CONFIGURATION VARIABLES","body":[{"name":"target-org","description":"Username or alias of the org that all commands run against by default. (sf only)"},{"name":"org-api-version","description":"API version of your project. Default: API version of your Dev Hub org."}]},"envVariablesSection":{"header":"ENVIRONMENT VARIABLES","body":[{"name":"SF_TARGET_ORG","description":"Username or alias of your default org. Overrides the target-org configuration variable."},{"name":"SF_USE_PROGRESS_BAR","description":"Set to false to disable the progress bar when running the metadata deploy command."}]},"errorCodes":{"header":"ERROR CODES","body":[{"name":"Succeeded (0)","description":"The deploy succeeded."},{"name":"Canceled (1)","description":"The deploy was canceled."},{"name":"Failed (1)","description":"The deploy failed."},{"name":"SucceededPartial (68)","description":"The deploy partially succeeded."},{"name":"InProgress (69)","description":"The deploy is in progress."},{"name":"Pending (69)","description":"The deploy is pending."},{"name":"Canceling (69)","description":"The deploy is being canceled."}]},"hasDynamicHelp":true},"retrieve:metadata:preview":{"id":"retrieve:metadata:preview","summary":"Preview a retrieval to see what will be retrieved from the org, the potential conflicts, and the ignored files.","description":"You must run this command from within a project.\n\nThe command outputs a table that describes what will happen if you run the \"sf retrieve metadata\" command. The table lists the metadata components that will be retrieved and deleted. The table also lists the current conflicts between files in your local project and components in the org. Finally, the table lists the files that won't be retrieved because they're included in your .forceignore file.\n\nIf your org allows source tracking, then this command considers conflicts between the org and local. Some orgs, such as production orgs, never allow source tracking. Use the \"--no-track-source\" flag when you create a scratch or sandbox org to disable source tracking.","strict":true,"pluginName":"@salesforce/plugin-deploy-retrieve","pluginAlias":"@salesforce/plugin-deploy-retrieve","pluginType":"core","state":"beta","aliases":[],"examples":["Preview the retrieve of all changes from the org:\n<%= config.bin %> <%= command.id %>","Preview the retrieve when ignoring any conflicts:\n<%= config.bin %> <%= command.id %> --ignore-conflicts"],"flags":{"json":{"name":"json","type":"boolean","description":"Format output as json.","helpGroup":"GLOBAL","allowNo":false},"ignore-conflicts":{"name":"ignore-conflicts","type":"boolean","char":"c","summary":"Ignore conflicts and preview the retrieve of remote components, even if they will overwrite local changes.","description":"This flag applies only to orgs that allow source tracking. It has no effect on orgs that don't allow it, such as production orgs.","allowNo":false},"target-org":{"name":"target-org","type":"option","char":"o","summary":"Login username or alias for the target org.","description":"Overrides your default org.","multiple":false}},"args":[],"requiresProject":true,"hasDynamicHelp":true}}}