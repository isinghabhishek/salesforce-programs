"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs");
const execa = require("execa");
const semver = require("semver");
const lang_runner_1 = require("./lang-runner");
const runtimePackage = '@heroku/sf-fx-runtime-nodejs@0.11.2';
class NodeJsLangRunner extends lang_runner_1.default {
    detect() {
        return __awaiter(this, void 0, void 0, function* () {
            const packageJsonPath = path.resolve(this.path, 'package.json');
            try {
                yield fs.promises.access(packageJsonPath);
            }
            catch (_a) {
                return false;
            }
            return true;
        });
    }
    build() {
        return __awaiter(this, void 0, void 0, function* () {
            yield NodeJsLangRunner.checkNodeJs();
            yield NodeJsLangRunner.checkNpx();
            yield this.runNpmBuild();
        });
    }
    start() {
        return this.startRuntime();
    }
    static checkNodeJs() {
        return __awaiter(this, void 0, void 0, function* () {
            let stdout = '';
            try {
                const cmd = yield execa.command('node -v');
                ({ stdout } = cmd);
            }
            catch (error) {
                throw new Error('Node.JS executable not found.');
            }
            const version = semver.clean(stdout);
            if (!version || semver.lt(version, '14.0.0')) {
                throw new Error('Node.js functions require Node.js 14 or greater.');
            }
        });
    }
    static checkNpx() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                yield execa.command('npx -v');
            }
            catch (error) {
                throw new Error('npx executable not found.');
            }
        });
    }
    runNpmBuild() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const packageJsonPath = path.resolve(this.path, 'package.json');
            let packageJsonContent;
            try {
                packageJsonContent = yield fs.promises.readFile(packageJsonPath, 'utf8');
            }
            catch (_b) {
                throw new Error(`Could not read 'package.json' from ${packageJsonPath}.`);
            }
            let packageJson;
            try {
                packageJson = JSON.parse(packageJsonContent);
            }
            catch (_c) {
                throw new Error(`Cound not parse 'package.json' as JSON from ${packageJsonPath}.`);
            }
            if ((_a = packageJson.scripts) === null || _a === void 0 ? void 0 : _a.build) {
                try {
                    yield execa.command(['npm', 'run', 'build', '--prefix', this.path].join(' '), {
                        stdio: 'inherit',
                    });
                }
                catch (err) {
                    throw new Error(`Could not execute npm build script: ${err}`);
                }
            }
        });
    }
    startRuntime() {
        return execa.command([
            'npx',
            '-y',
            '-timeout=60000',
            runtimePackage,
            'serve',
            this.path,
            '--host',
            this.host,
            '--port',
            this.port.toString(),
            '--debug-port',
            this.debugPort.toString(),
        ].join(' '), {
            stdio: 'inherit',
        });
    }
}
exports.default = NodeJsLangRunner;
