"use strict";
/*
 * Copyright (c) 2020, salesforce.com, inc.
 * All rights reserved.
 * Licensed under the BSD 3-Clause license.
 * For full license text, see LICENSE.txt file in the repo root or https://opensource.org/licenses/BSD-3-Clause
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalRun = void 0;
const lang_runner_nodejs_1 = require("./lang-runner-nodejs");
const lang_runner_java_1 = require("./lang-runner-java");
const local_run_process_1 = require("./local-run-process");
class LocalRun {
    constructor(lang = 'auto', runnerOpts = {}, runners) {
        this.lang = lang;
        runners =
            runners !== null && runners !== void 0 ? runners : new Map([
                ['nodejs', lang_runner_nodejs_1.default],
                ['java', lang_runner_java_1.default],
            ]);
        this.runners = new Map();
        for (const [l, r] of runners) {
            this.runners.set(l, new r(runnerOpts));
        }
    }
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            let runner;
            switch (this.lang) {
                case 'auto':
                    runner = yield this.autoDetect();
                    break;
                case 'javascript':
                case 'typescript':
                    runner = this.runners.get('nodejs');
                    break;
                default:
                    runner = this.runners.get(this.lang);
            }
            if (!runner) {
                throw new Error(`Could not determine local function invoker for language: ${this.lang}`);
            }
            yield runner.build();
            return new local_run_process_1.LocalRunProcess(runner.start());
        });
    }
    autoDetect() {
        return __awaiter(this, void 0, void 0, function* () {
            const detectionPromises = [];
            for (const [, runner] of this.runners.entries()) {
                detectionPromises.push(runner.detect().then((detected) => (detected ? runner : undefined)));
            }
            const detectionResults = yield Promise.all(detectionPromises);
            return detectionResults.find((r) => r);
        });
    }
}
exports.LocalRun = LocalRun;
