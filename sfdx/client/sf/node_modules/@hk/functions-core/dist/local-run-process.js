"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LocalRunProcess_childProcess;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalRunProcess = void 0;
const events_1 = require("events");
class LocalRunProcess extends events_1.EventEmitter {
    constructor(childProcess) {
        super();
        _LocalRunProcess_childProcess.set(this, void 0);
        this.cancelled = false;
        __classPrivateFieldSet(this, _LocalRunProcess_childProcess, childProcess, "f");
        __classPrivateFieldGet(this, _LocalRunProcess_childProcess, "f").on('close', (exitCode, signal) => {
            this.emit('close', exitCode, signal);
        });
    }
    get stdout() {
        return __classPrivateFieldGet(this, _LocalRunProcess_childProcess, "f").stdout;
    }
    get stderr() {
        return __classPrivateFieldGet(this, _LocalRunProcess_childProcess, "f").stderr;
    }
    cancel() {
        if (__classPrivateFieldGet(this, _LocalRunProcess_childProcess, "f").kill()) {
            this.cancelled = true;
        }
    }
}
exports.LocalRunProcess = LocalRunProcess;
_LocalRunProcess_childProcess = new WeakMap();
